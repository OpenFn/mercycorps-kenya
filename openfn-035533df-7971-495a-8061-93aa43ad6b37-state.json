{
  "id": "035533df-7971-495a-8061-93aa43ad6b37",
  "name": "mcke",
  "description": null,
  "concurrency": null,
  "inserted_at": "2024-05-30T04:40:17Z",
  "updated_at": "2025-09-22T19:20:04Z",
  "scheduled_deletion": null,
  "project_credentials": {
    "pkioi@mercycorps.org-SQL-AZURE": {
      "id": "8283766a-adaf-4f46-9823-6a1217362f56",
      "name": "SQL-AZURE",
      "owner": "pkioi@mercycorps.org"
    },
    "pkioi@mercycorps.org-Commcare": {
      "id": "b6ddedf7-6dd4-4a04-9481-db33f3ae5ea9",
      "name": "Commcare",
      "owner": "pkioi@mercycorps.org"
    }
  },
  "history_retention_period": 7,
  "dataclip_retention_period": 7,
  "retention_policy": "retain_all",
  "collections": {},
  "workflows": {
    "BOY-Register": {
      "id": "02ac4e9d-2c71-4787-bedd-8d760b2480c6",
      "name": "BOY Register",
      "edges": {
        "webhook->BOY-Register": {
          "enabled": true,
          "id": "f9fd9318-7598-4316-ab42-f6f1e4544dca",
          "target_job_id": "6ecc0ef4-68e2-40e9-a11c-c9a0fdd45dc0",
          "source_trigger_id": "e3319efe-5313-419b-b98c-eaa9e88036f3",
          "condition_type": "always",
          "condition_label": "BOY Register Monthly Update",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"BOY Register(Monthly)\""
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:15Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "BOY-Register": {
          "id": "6ecc0ef4-68e2-40e9-a11c-c9a0fdd45dc0",
          "name": "BOY Register",
          "body": "//case management\nupsert(\"case_management\", [\"case_id\", \"reporting_period\"],\n    state => ({\n        case_id: dataValue(\"form.case['@case_id']\"),\n        pax_group: dataValue('form.boy_demographics_information.pax_group') || \"\",\n        group_name: dataValue('form.boy_group_details.group_name_new') || \"\",\n        group_no: dataValue('form.boy_group_details.groupno') || \"\",\n        reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),\n        user_id: dataValue(\"form.case['@user_id']\"),\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        date_modified: dataValue(\"form.case['@date_modified']\"),\n        linked_facility: dataValue('form.case.update.linked_facility'),\n        the_county: dataValue('form.case.update.the_county'),\n        the_cu_name: dataValue('form.case.update.the_cu_name'),\n        the_location: dataValue('form.boy_group_details.the_location'),\n        the_subcounty: dataValue('form.case.update.the_subcounty'),\n        the_village: dataValue('form.case.update.the_village'),\n        the_ward: dataValue('form.case.update.the_ward'),\n        facilitated_by: dataValue('form.facilitated_by.facilitator'),\n        username: dataValue('form.meta.username'),\n        app_build_version: dataValue('form.meta.app_build_version'),\n        submit_ip: dataValue('submit_ip'),\n        \n        originator: 'v2',//tracking the origin of the forwarder\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//2.boy_anthropometric_information\nupsert(\"boy_anthropometric_information\", [\"case_id\", \"reporting_period\"],\n    state => ({\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        case_id: dataValue(\"form.case['@case_id']\"),\n        reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),\n        bmi_calc: dataValue('form.boy_anthropometric_information.bmi_status_calc'),\n        bmi_value: Number(dataValue('form.boy_anthropometric_information.bmi_boyvalue')) || 0,\n        //bmi_value: dataValue('form.boy_anthropometric_information.bmi_boyvalue') || 0,\n        //heightcm: dataValue('form.boy_anthropometric_information.boy_heightcm') || '0',\n        heightcm: dataValue('form.boy_anthropometric_information.boy_heightcm') || 0,\n        weightkg: dataValue('form.boy_anthropometric_information.boy_weightkg') || 0,\n        muacvalue: dataValue('form.boy_anthropometric_information.boy_muacvalue') || 0,\n        muac_membr: dataValue('form.boy_anthropometric_information.muac_membr') || '',\n        originator: 'v2',\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//3.boy_demographics_information\nupsert(\"boy_demographics_information\", [\"case_id\", \"reporting_period\"],\n    state => ({\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        case_id: dataValue(\"form.case['@case_id']\"),\n        reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),\n\n        HHID_hh: dataValue('form.boy_demographics_information.HHID_hh'),\n        HHID_output: dataValue('form.boy_demographics_information.HHID_output'),\n        //age: dataValue('form.boy_demographics_information.age') || 0,\n        //age: isNaN(dataValue('form.boy_demographics_information.age')) ? null : Number(dataValue('form.boy_demographics_information.age')),\n        socialstatus: dataValue('form.boy_demographics_information.boy_socialstatus'),\n        participant_name: dataValue('form.boy_demographics_information.participant_name'),\n        pax_group: dataValue('form.boy_demographics_information.pax_group'),\n        sex: dataValue('form.boy_demographics_information.sex'),\n        lactating: dataValue('form.boy_demographics_information.boy_lactating'),\n        pregnant: dataValue('form.boy_demographics_information.boy_pregnant'),\n        group_name: dataValue('form.boy_group_details.group_name_new'),\n        hvchildren0to5m: dataValue(\"form.boy_demographics_information['hvchildren0to5m']\"),\n        hvchildren10to14yrs: dataValue(\"form.boy_demographics_information['hvchildren10to14yrs']\"),\n        hvchildren15to19yrs: dataValue(\"form.boy_demographics_information['hvchildren15to19yrs']\"),\n        hvchildren24to59m: dataValue(\"form.boy_demographics_information['hvchildren24to59m']\"),\n        hvchildren5to9yrs: dataValue(\"form.boy_demographics_information['hvchildren5to9yrs']\"),\n        hvchildren6to23m: dataValue(\"form.boy_demographics_information['hvchildren6to23m']\"),\n\n\n        no_male0to5m: dataValue('form.boy_demographics_information.no_male0to5m') || 0,\n        no_female0to5m: dataValue('form.boy_demographics_information.no_female0to5m') || 0,\n        no_male6to23m: dataValue('form.boy_demographics_information.no_male6to23m') || 0,\n        no_female6to23m: dataValue('form.boy_demographics_information.no_female6to23m') || 0,\n        no_male_24_59m: dataValue('form.boy_demographics_information.how_many_male_24_59m') || 0,\n        no_female_24_59m: dataValue('form.boy_demographics_information.how_many_female_24_59m') || 0,\n        no_male5to9yrs: dataValue('form.boy_demographics_information.no_male5to9yrs') || 0,\n        no_female5to9yrs: dataValue('form.boy_demographics_information.no_female5to9yrs') || 0,\n        no_male10to14yrs: dataValue('form.boy_demographics_information.no_male10to14yrs') || 0,\n        no_female10to14yrs: dataValue('form.boy_demographics_information.no_female10to14yrs') || 0,\n        no_male15to19yrs: dataValue('form.boy_demographics_information.no_male15to19yrs') || 0,\n        no_female15to19yrs: dataValue('form.boy_demographics_information.no_female15to19yrs') || 0,\n        new_group_type: dataValue('form.boy_demographics_information.new_group_type'),\n        originator: 'v2',\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//4.boy_monthly_interventions\nupsert(\"boy_monthly_interventions\", [\"case_id\", \"reporting_period\"],\n    state => ({\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        case_id: dataValue(\"form.case['@case_id']\"),\n        reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),\n        grp_weekly_sessionscode: dataValue('form.boy_monthly_interventions.grp_weekly_sessionscode'),\n        transition_pathway: dataValue('form.boy_monthly_interventions.transition_pathway'),\n\n        interv_healthnutrition: dataValue('form.boy_monthly_interventions.interv_healthnutrition'),\n        interv_referral: dataValue('form.boy_monthly_interventions.interv_referral'),\n        interv_referrals: dataValue('form.boy_monthly_interventions.interv_referrals'),\n        interv_socialservices: dataValue('form.boy_monthly_interventions.interv_socialservices'),\n        resillient_livelihoods: dataValue('form.boy_monthly_interventions.resillient_livelihoods'),\n\n\n        week1datetime: dataValue(\"form.boy_monthly_interventions['week1datetime']\"),\n        week2datetime: dataValue(\"form.boy_monthly_interventions['week2datetime']\"),\n        week3datetime: dataValue(\"form.boy_monthly_interventions['week3datetime']\"),\n        week4datetime: dataValue(\"form.boy_monthly_interventions['week4datetime']\"),\n        weekly_session_attended: dataValue('form.boy_monthly_interventions.weekly_session_attended'),\n\n        moh_100_serial_number: dataValue('form.boy_monthly_interventions.moh_100community_refferal_form_serial_number') || '',\n        moh_409_serial_number: dataValue('form.boy_monthly_interventions.moh_409_code_in_the_register') || '',\n\n\n        originator: 'v2',\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//5.boy_sessions_information\nupsert(\"boy_sessions_information\", [\"case_id\", \"reporting_period\"],\n    state => ({\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        case_id: dataValue(\"form.case['@case_id']\"),\n        reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),\n        demonstration: dataValue('form.boy_sessions_information.demonstration'),\n        products_distributed: dataValue('form.boy_sessions_information.products_distributed'),\n        sources_of_serviceproduct:dataValue('form.boy_sessions_information.sources_of_serviceproduct_or_messageeducation.sources_of_serviceproduct_or_messageeducation_this_monthconfirm_from_source'),\n        originator: 'v2',\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n",
          "adaptor": "@openfn/language-mssql@5.0.9",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "e3319efe-5313-419b-b98c-eaa9e88036f3",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 40
    },
    "Add-HH-Member": {
      "id": "c836833e-7310-43c2-aba0-475b7f4547a7",
      "name": "Add HH Member",
      "edges": {
        "webhook->Add-HH-Member": {
          "enabled": true,
          "id": "63bfddcd-5d82-4153-82a2-79d3ab5360aa",
          "target_job_id": "e98843ee-e3c8-4553-998b-c23cccfbf9d2",
          "source_trigger_id": "abb3e9d0-7056-47d9-884e-be91bd4b3268",
          "condition_type": "js_expression",
          "condition_label": "Register HH",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"Register HH and Classify Participants\"\n"
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:15Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Add-HH-Member": {
          "id": "e98843ee-e3c8-4553-998b-c23cccfbf9d2",
          "name": "Add HH Member",
          "body": "upsertMany(\n  'hh_members',\n  'case_id',\n  state => {\n    //const dataArray = state.data.form.hh_members_registration || [];\n    \n    const forceArray=(x)=>Array.isArray(x)?x:[x]; //function to force a json object into an array\n    const dataArray=forceArray(state.data.form.hh_members_registration);\n    \n   //if (Array.isArray(dataArray)) {\n    const azureHHmembers = dataArray.map((x, i) => {\n    const hhCodes = x.pax_identifier_information.HHID_output.split('HH');\n    const hhMemberId = `HH${hhCodes[1]}-${i}`;\n      //console.log('The hhMemberId is:', hhMemberId);\n\n      return {\n        //=============================My Loop values:=============\n        number: hhMemberId,\n\n        Participant_id: x.pax_identifier_information.hhm_id,\n\n        fname: x.pax_identifier_information.PAX_info.first_name,\n        mname: x.pax_identifier_information.PAX_info.middle_name,\n        lname: x.pax_identifier_information.PAX_info.last_name,\n        nickname: x.pax_identifier_information.PAX_info.nickname,\n\n        gender: x.pax_identifier_information.PAX_info.sex,\n        dob: x.pax_identifier_information.PAX_info.hhm_dob,\n        mobileno: x.pax_identifier_information.PAX_info.hhm_phone_number,\n\n        id_huduma: x.pax_identifier_information.PAX_info.id_number,\n        relationship: x.pax_identifier_information.PAX_info.hhm_relationship,\n        disability: x.pax_identifier_information.PAX_info.disability,\n        participant_grp: x.pax_identifier_information.persons_info.pax_group,\n\n        female_status: x.pax_identifier_information.special_groups.this_woman_is,\n        // MUAC_value: x.pax_identifier_information.special_groups.MUAC_status_calc,\n        MUAC_value: x.pax_identifier_information.special_groups.muac_value || 0,\n\n        // delivery_date: x.pax_identifier_information.PAX_info.middle_name,\n        source_of_livelihood: x.pax_identifier_information.special_groups.livelihood,\n        mom_child_booklet: x.pax_identifier_information.has_motherchildbooklet,\n        community_unit: x.pax_identifier_information.the_cu_name,\n\n        // TODO: please check where these value are found ------------------\n        //comm_frp_mobile: x.pax_identifier_information.chs_hh.question_list_chusla.chs_contact,\n        comm_frp_mobile:dataValue('form.case.update.chs_contact'),\n        // CHS_hh_number: x.pax_identifier_information.chs_hh.question_list_chusla.CHS_Household_Number,\n        // -----------------------------------------------------------------\n\n        facility_comm_unit: x.pax_identifier_information.linked_facility_in_cu,\n\n        // health_insurance: x.pax_identifier_information.chs_hh.question_list_chusla.do_you_have_health_insurance_cover,\n        // health_insurance_details: x.pax_identifier_information.PAX_info.middle_name,\n\n        // birth_cert: x.pax_identifier_information.PAX_info.middle_name,\n        // birth_cert_no: x.pax_identifier_information.chs_hh.question_list_chusla.birth_certificate_no,\n\n        // orphan: x.pax_identifier_information.chs_hh.question_list_chusla.orphan,\n\n        // other_health_insurance: x.pax_identifier_information.PAX_info.middle_name,\n\n        // schooling: x.pax_identifier_information.chs_hh.question_list_chusla.in_school,\n\n        // vitamin_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_vitamin_a_given || '',\n        // penta_3_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_penta_3_given || '',\n        // immunized: x.pax_identifier_information.chs_hh.question_list_chusla.is_a_child_fully_immunized_under_1_yr_old || '',\n        // measles_rubella_immunized: x.pax_identifier_information.chs_hh.question_list_chusla.measles_rubella_at_2_years || '',\n        // delivery_place: x.pax_identifier_information.chs_hh.question_list_chusla.state_the_place_of_delivery || '',\n\n        full_name: x.pax_identifier_information.PAX_info.pax_full_name,\n        age_months: x.pax_identifier_information.PAX_info.hhm_age_months,\n        hhm_age_years: x.pax_identifier_information.PAX_info.hhm_age_years,\n        under_5: x.pax_identifier_information.PAX_info.under_5,\n        MUAC_status_calc: x.pax_identifier_information.special_groups.MUAC_status_calc || '',\n        family_setup: x.pax_identifier_information.family_setup,\n        orphan_second: x.case.update.orphan,\n        fully_immunized_under_one: x.pax_identifier_information.fully_immunized_under_one,\n\n        functional_latrine: x.pax_identifier_information.functional_latrine,\n        mother_child_booklet: x.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,\n\n        The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),\n        subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),\n        the_ward: x.pax_identifier_information.the_ward,\n        The_location: x.pax_identifier_information.the_location,\n        the_village: x.pax_identifier_information.the_village,\n        srtt_village: 'SRTT_VILLAGE_ ' + x.pax_identifier_information.the_village,\n\n        collected_by: x.pax_identifier_information.user_collected_is,\n        date_of_collection: x.pax_identifier_information.date_of_collection,\n        hhid_output: x.case.update.HHID_output,\n\n        vitamin_a_under1: x.pax_identifier_information['vitamin_a_under1'],\n\n        case_id: x.case['@case_id'],\n        parent_case_id: dataValue('form.case.@case_id'), //foreign key for households\n\n        GPS: x.pax_identifier_information.GPS,\n        date_posted: new Date().toISOString(),\n      };\n    });\n    return azureHHmembers;\n \n  },\n\n  { setNull: false, writeSql: true, logValues: false }\n);\n",
          "adaptor": "@openfn/language-mssql@latest",
          "project_credential_id": null
        }
      },
      "triggers": {
        "webhook": {
          "enabled": false,
          "id": "abb3e9d0-7056-47d9-884e-be91bd4b3268",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 18
    },
    "Group-Remapping": {
      "id": "7b6dca67-84cf-4416-a767-c0c610141f5d",
      "name": "Group Remapping",
      "edges": {
        "webhook->Group-Remapping": {
          "enabled": true,
          "id": "61bf06aa-fa15-491b-b6cf-94ba5efd2b11",
          "target_job_id": "5a4ec174-3819-4e12-a617-c8eafc7bc45d",
          "source_trigger_id": "a227ff93-f0e7-4c6c-b45a-3b7b41289a41",
          "condition_type": "always",
          "condition_label": "Anchor Group Mapping-Reviewed",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"Anchor Group Mapping (AM2MSG/BOY/GIRL/REAP4N/CHILD)\""
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:15Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Group-Remapping": {
          "id": "5a4ec174-3819-4e12-a617-c8eafc7bc45d",
          "name": "Group Remapping",
          "body": "\nupsert(\"anchor_group_members\", ['case_id', 'groupno', 'group_type'],\n\tstate => {\n\t\tlet tempdate = dataValue(\"form['question1'].display_group_other_information.start_date\")(state);\n\t\t// Create a Date object\n\t\tconst dateObj = new Date(tempdate);\n\t\tlet grpStartDate;\n\t\tlet jsDate;\n\n\t\ttempdate = Number(tempdate);\n\t// Check if startDate is a number\n\tif (typeof tempdate === 'number' && !isNaN(tempdate)) {\n\t\tconsole.log(`startDate ${tempdate} is a valid number`);\n\t\t// Convert the number to a date\n\t\tconst excelEpochOffset = 25569; // Days between 1900 and 1970\n\t\tjsDate = new Date((tempdate - excelEpochOffset) * 86400000); // Convert to JS Date\n\t\tjsDate = jsDate.toISOString().split('T')[0]; //// This gives us 'yyyy-mm-dd'\n\n\n\t\tconsole.log(`The new date is : ${jsDate}`); // Output the corresponding date\n\t} else {\n\t\tconsole.log(\"startDate is not a valid number\");\n\t}\n\n\n\t\treturn {\n\t\t\t\n\t\t\tcase_id: dataValue(\"form.case['@case_id']\")(state),\n\t\t\tgroupno: dataValue(\"form.case.update.groupname\")(state),\n\t\t\tgroup_name: dataValue('form.case.update.group_name_dsc')(state),\n\t\t\tgroup_type: dataValue('form.case.update.group_type')(state),\n\t\t\tdate_created: jsDate,\n\t\t\thh_id: dataValue('form.other_demographics_info.hhid_output')(state),\n\t\t\tfull_name: dataValue('form.other_demographics_info.pax_fullname')(state),\n\t\t\tusername: dataValue('metadata.username')(state),\n\t\t\tdate_posted: dataValue('metadata.timeEnd')(state),\n\t\t\tdate_modified: new Date(),\n\t\t\tregistercategory: dataValue(\"form['question1'].display_group_other_information.register_category\")(state),\n\t\t\tparticipant_group: dataValue(\"form['question1'].pax_group_allocated\")(state),\n\t\t\toriginator: 'v2',\n\t\t};\n\t},\n\t{\n\t\tsetNull: \"'undefined'\",\n\t\tlogValues: true,\n\t}\n);\n",
          "adaptor": "@openfn/language-mssql@5.0.9",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "a227ff93-f0e7-4c6c-b45a-3b7b41289a41",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 35
    },
    "Child-Register-Follow-Up": {
      "id": "d3344dda-a8f9-4d23-9920-b0785d53263f",
      "name": "Child Register Follow-Up",
      "edges": {
        "webhook->Child-Register-Follow-Up": {
          "enabled": true,
          "id": "32896028-fffd-47be-a8d2-a47f930ce35f",
          "target_job_id": "93016d9f-a5a5-44f0-8cd8-df904a04a4fe",
          "source_trigger_id": "eb9dd21c-03bb-43e7-a6ca-e099606b6ba2",
          "condition_type": "always",
          "condition_label": "Child Register Trigger",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"Child Register(Monthly)\""
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:15Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Child-Register-Follow-Up": {
          "id": "93016d9f-a5a5-44f0-8cd8-df904a04a4fe",
          "name": "Child Register Follow-Up",
          "body": "//1.  Case Management\nfn(state => {\n  try {\n    return upsert(\n      \"case_management\",\n      ['case_id', 'reporting_period'],\n      state => {\n        const caseId = dataValue(\"form.case['@case_id']\")(state);\n        const reportingPeriod = dataValue('form.child_reporting_period.report_period')(state);\n\n        if (!caseId || !reportingPeriod) {\n          throw new Error('Missing required field: case_id or reporting_period');\n        }\n\n        return {\n          case_id: caseId,\n          reporting_period: reportingPeriod,\n          pax_group: dataValue('form.child_linked_group_details.pax_group') || \"\",\n          group_name: dataValue('form.child_linked_group_details.group_name_new') || \"\",\n          group_no: dataValue('form.child_linked_group_details.groupno') || \"\",\n          user_id: dataValue(\"form.case['@user_id']\"),\n          date_created: dataValue(\"form.case['@date_modified']\"),\n          date_modified: dataValue(\"form.case['@date_modified']\"),\n          linked_facility: dataValue('form.child_linked_group_details.linked_facility'),\n          the_county: dataValue('form.child_linked_group_details.the_county'),\n          the_cu_name: dataValue('form.child_linked_group_details.the_cu_name'),\n          the_location: dataValue('form.child_linked_group_details.the_location'),\n          the_subcounty: dataValue('form.child_linked_group_details.the_subcounty'),\n          the_village: dataValue('form.child_linked_group_details.the_village'),\n          the_ward: dataValue('form.child_linked_group_details.the_ward'),\n          //added on v2\n          facilitated_by: dataValue('form.child_facilitated_by.facilitator'),\n          username: dataValue('form.meta.username'),\n          app_build_version: dataValue('form.meta.app_build_version'),\n          submit_ip: dataValue('submit_ip'),\n          originator: 'v2',\n        };\n      },\n      {\n        setNull: [\"'undefined'\", \"''\", \"null\"],\n        logValues: true,\n      }\n    )(state);\n  } catch (error) {\n    console.error('====Error in upsert operation:====', error);\n    throw error;\n  }\n});\n\n//2.child_anthropometric_information\nupsert(\"child_anthropometric_information\", [\"case_id\", \"reporting_period\"],\n    state => {\n              let bmi=0;\n              let height=0;\n              let weight=0;\n            height= dataValue('form.child_anthropometric_information.child_heightcm')(state) || 0;\n            weight= dataValue('form.child_anthropometric_information.child_weightkg')(state) || 0;\n              //calculate BMI once again.\n              /**\n               * bmi=weight(kg)/(height*height)m\n               */\n              if(height!=0){\n                bmi=weight/((height/100)*(height/100));\n                bmi=bmi.toFixed(2);\n              }\n              console.log(bmi);\n              //classify bmi base on numbers===under 5\n\n        return {\n            date_created: dataValue(\"form.case['@date_modified']\")(state),\n            case_id: dataValue(\"form.case['@case_id']\")(state),\n            reporting_period: dataValue('form.child_reporting_period.report_period')(state),\n            bmi_status_calc: dataValue('form.child_anthropometric_information.bmi_status_calc')(state),\n            bmi_child_value: bmi,\n            child_heightcm: dataValue('form.child_anthropometric_information.child_heightcm')(state) || 0,\n            child_weightkg: dataValue('form.child_anthropometric_information.child_weightkg')(state) || 0,\n            child_muacvalue: dataValue('form.child_anthropometric_information.child_muacvalue')(state) || 0,\n            MUAC_status_calc: dataValue('form.child_anthropometric_information.MUAC_status_calc')(state) || 'NOT DONE',\n            child_linked_group:dataValue('form.child_demographics_information.child_linked_group')(state),\n            originator: 'v2',\n        };\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n",
          "adaptor": "@openfn/language-mssql@latest",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "eb9dd21c-03bb-43e7-a6ca-e099606b6ba2",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 47
    },
    "Mother-2-Mother-Followup": {
      "id": "8de78fbc-545d-414b-8834-bb45b35c2661",
      "name": "Mother-2-Mother Followup",
      "edges": {
        "webhook->Mother-2-Mother-Followup": {
          "enabled": true,
          "id": "5d49766e-387d-4bf3-87a7-62c1010dfc3a",
          "target_job_id": "7f358452-84a8-4da9-9fc5-e939b17f7f78",
          "source_trigger_id": "758680de-beb5-4b26-8d1a-e7c70a141152",
          "condition_type": "always",
          "condition_label": "am2msg Monthly Update",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"AM2MSG Register(Monthly)\""
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:15Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Mother-2-Mother-Followup": {
          "id": "7f358452-84a8-4da9-9fc5-e939b17f7f78",
          "name": "Mother-2-Mother Followup",
          "body": "\n//2.am2mcg_demographics_information\nupsert(\"case_management\", [\"case_id\", \"reporting_period\"],\n    state => ({\n        case_id: dataValue(\"form.case['@case_id']\"),\n        pax_group: dataValue('form.am2msg_group_details.pax_group') || \"\",\n        group_name: dataValue('form.am2msg_group_details.group_name_new') || \"\",\n        group_no: dataValue('form.am2msg_group_details.groupno') || \"\",\n        reporting_period: dataValue('form.am2mcg_reporting_period.report_period'),\n        user_id: dataValue('form.meta.userID'),\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        date_modified: dataValue(\"form.case['@date_modified']\"),\n        linked_facility: dataValue('form.am2msg_group_details.linked_facility'),\n        the_county: dataValue('form.am2msg_group_details.the_county'),\n        the_cu_name: dataValue('form.am2msg_group_details.the_cu_name'),\n        the_location: dataValue('form.am2msg_group_details.the_location'),\n        the_subcounty: dataValue('form.am2msg_group_details.the_subcounty'),\n        the_village: dataValue('form.am2msg_group_details.the_village'),\n        the_ward: dataValue('form.am2msg_group_details.the_ward'),\n        //added on v2\n        facilitated_by: dataValue('form.facilitated_by.facilitator'),\n        username: dataValue('form.meta.username'),\n        app_build_version: dataValue('form.meta.app_build_version'),\n        submit_ip: dataValue('submit_ip'),\n\n        originator: 'v2',//tracking the origin of the forwarder\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//2.am2mcg_demographics_information\nupsert(\"am2mcg_demographics_information\", [\"case_id\", \"reporting_period\"],\n    state => {\n        return {\n\n            date_created: dataValue(\"form.case['@date_modified']\")(state),\n            case_id: dataValue(\"form.case['@case_id']\")(state),\n            reporting_period: dataValue('form.am2mcg_reporting_period.report_period')(state),\n            HHID_output: dataValue('form.am2mcg_demographics_information.HHID_output')(state),\n            age: dataValue('form.am2mcg_demographics_information.age')(state) || 0,\n            social_status: dataValue('form.am2mcg_demographics_information.social_status')(state),\n            lactating: dataValue('form.am2mcg_demographics_information.lactating')(state),\n            pregnant: dataValue('form.am2mcg_demographics_information.pregnant')(state),\n            //group_name: dataValue('form.am2msg_group_details.group_name_new')(state),\n            \n            hvchildren0to5m: dataValue(\"form.am2mcg_demographics_information['hvchildren0to5m']\")(state),\n            hvchildren10to14yrs: dataValue(\"form.am2mcg_demographics_information['hvchildren10to14yrs']\")(state),\n            hvchildren15to19yrs: dataValue(\"form.am2mcg_demographics_information['hvchildren15to19yrs']\")(state),\n            hvchildren24to59m: dataValue(\"form.am2mcg_demographics_information['hvchildren24to59m']\")(state),\n            hvchildren5to9yrs: dataValue(\"form.am2mcg_demographics_information['hvchildren5to9yrs']\")(state),\n            hvchildren6to23m: dataValue(\"form.am2mcg_demographics_information['hvchildren6to23m']\")(state),\n            //new_group_type: dataValue('form.am2mcg_demographics_information.new_group_type')(state),\n      \n            how_many_female_24_59m:dataValue('form.am2mcg_demographics_information.how_many_female_24_59m')(state)||0,\n            how_many_male_24_59m:dataValue('form.am2mcg_demographics_information.how_many_male_24_59m')(state)||0,\n            \n            no_female0to5m:dataValue('form.am2mcg_demographics_information.no_female0to5m')(state)||0,\n            no_female10to14yrs:dataValue('form.am2mcg_demographics_information.no_female10to14yrs')(state)||0,\n            no_female15to19yrs:dataValue('form.am2mcg_demographics_information.no_female15to19yrs')(state)||0,\n            no_female5to9yrs:dataValue('form.am2mcg_demographics_information.no_female5to9yrs')(state)||0,\n            no_female6to23m:dataValue('form.am2mcg_demographics_information.no_female6to23m')(state)||0,\n            \n            no_male0to5m:dataValue('form.am2mcg_demographics_information.no_male0to5m')(state)||0,\n            no_male10to14yrs:dataValue('form.am2mcg_demographics_information.no_male10to14yrs')(state)||0,\n            no_male15to19yrs:dataValue('form.am2mcg_demographics_information.no_male15to19yrs')(state)||0,\n            no_male5to9yrs:dataValue('form.am2mcg_demographics_information.no_male5to9yrs')(state)||0,\n            no_male6to23m:dataValue('form.am2mcg_demographics_information.no_male6to23m')(state)||0,\n            participant_name: dataValue('form.am2mcg_demographics_information.participant_name')(state)||0,\n  \n            //pax_group: dataValue('form.am2mcg_demographics_information.pax_group')(state),\n            sex: dataValue('form.am2mcg_demographics_information.sex')(state),\n            tbirth_attendant:dataValue('form.am2mcg_demographics_information.tbirth_attendant')(state),\n            originator: 'v2',\n        };\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//3.am2mcg_interventions\nupsert(\n    'am2mcg_interventions',\n    ['case_id','reporting_period'],\n    {\n        date_created:dataValue('metadata.timeEnd'),\n        case_id:dataValue(\"form.case['@case_id']\"),\n        reporting_period:dataValue(\"form['am2mcg_reporting_period'].report_period\"),\n        health_interv_rcvd:dataValue(\"form['am2mcg_interventions'].health_interv_rcvd\"),\n        other_hn_inter:dataValue(\"form['am2mcg_interventions'].other_hn_inter\"),\n        livelihoods_interv_rcvd:dataValue(\"form['am2mcg_interventions'].livelihoods_interv_rcvd\"),\n        other_resillinet:dataValue(\"form['am2mcg_interventions'].other_resillinet\")||\"\",\n        social_service_interv:dataValue(\"form['am2mcg_interventions'].social_service_interv\"),\n        other_ss:dataValue(\"form['am2mcg_interventions'].other_ss\"),\n        interv_referrals:dataValue(\"form['am2mcg_interventions'].interv_referrals\"),\n        other_referrals:dataValue(\"form['am2mcg_interventions'].other_referrals\"),\n        completed_referral:dataValue(\"form['am2mcg_interventions'].completed_referral\"),\n        originator: 'v2',\n    },\n    {\n          setNull: \"'undefined'\",\n          logValues: true,\n      }\n    );\n\n\n\n\n\n//4.am2mcg_products_distributed\n//==============================================\nupsert(\n  'am2mcg_products_distributed',\n  ['case_id','reporting_period'],\n  state=>{\n    let ProductServiceSource = dataValue('form.sources_of_serviceproduct_or_messageeducation.sources_of_serviceproduct_or_messageeducation_this_month')(state);\n          // If the value is a string and we want to convert it to an integer, do so\n        if (typeof ProductServiceSource === 'string') {\n            ProductServiceSource = parseInt(ProductServiceSource, 10); // Convert to integer\n            //console.log(\"Converted ProductServiceSource:\", ProductServiceSource); // Output: 2\n        } else {\n            //console.log(\"The value is not a string, it's already a number or other type.\");\n        }\n\n\n        let sourceValue;\n\n        if (ProductServiceSource === 1) {\n            sourceValue = \"health_facility\";\n        } else if (ProductServiceSource === 2) {\n            sourceValue = \"anchor_group\";\n        } else if (ProductServiceSource === 3) {\n            sourceValue = \"outreach\";\n        } else if (ProductServiceSource === 4) {\n            sourceValue = \"others\";\n        } else {\n            sourceValue = ProductServiceSource;\n        }\n\n      return {\n          date_created: dataValue('metadata.timeEnd'),\n          case_id: dataValue(\"form.case['@case_id']\"),\n          reporting_period: dataValue(\"form['am2mcg_reporting_period'].report_period\"),\n          monthlyprdct_distribution: dataValue(\"form['am2mcg_products_distributed'].monthlyprdct_distribution\"),\n          sources_of_serviceproduct:sourceValue,\n          originator: 'v2',\n\n      };\n    }, {\n    setNull: \"'undefined'\",\n    logValues: true,\n}\n)\n\n//5.am2mcg_demonstrations_conducted\nupsert(\n  'am2mcg_demonstrations_conducted',\n  ['case_id','reporting_period'],\n  {\n    date_created:dataValue('metadata.timeEnd'),\n    case_id:dataValue(\"form.case['@case_id']\"),\n    reporting_period:dataValue(\"form['am2mcg_reporting_period'].report_period\"),\n    demonstrations_done:dataValue(\"form['am2mcg_demonstrations_conducted'].demonstrations_done\")||'none',\n    originator: 'v2',\n  },\n  {\n          setNull: \"'undefined'\",\n          logValues: true,\n      }\n  ); //am2mcg_demonstrations_conducted\n\n\n//6.am2mcg_anthropometric_information\nupsert(\"am2mcg_anthropometric_information\", [\"case_id\", \"reporting_period\"],\n    state => {\n        const origBMI = dataValue('form.am2mcg_anthropometric_information.bmi_value_calc')(state);\n        const bmiValue = origBMI === \"Infinity\" ? 0 : (dataValue('form.am2mcg_anthropometric_information.bmi_value_calc')(state) || 0);\n        const pregnant=dataValue('form.am2mcg_demographics_information.pregnant')(state);\n        const lactating=dataValue('form.am2mcg_demographics_information.lactating')(state);\n        let muacValue=0;\n        if(pregnant==\"yes\"|| lactating==\"yes\"){\n          muacValue=dataValue('form.am2mcg_anthropometric_information.member_muac')(state)||0;\n        }\n\n\n\n        return {\n            date_created: dataValue(\"form.case['@date_modified']\")(state),\n            case_id: dataValue(\"form.case['@case_id']\")(state),\n            reporting_period: dataValue('form.am2mcg_reporting_period.report_period')(state),\n            bmi_calc: dataValue('form.am2mcg_anthropometric_information.bmi_calc')(state),\n            bmi_value: bmiValue,//Number(dataValue('form.am2mcg_anthropometric_information.bmi_value_calc')(state)) || 0,\n            heightcm: dataValue('form.am2mcg_anthropometric_information.member_heightcm')(state) || 0,\n            weightkg: dataValue('form.am2mcg_anthropometric_information.member_weightkg')(state) || 0,\n            muacvalue:muacValue || 0,\n            muac_membr: dataValue('form.am2mcg_anthropometric_information.muac_membr')(state) || 'NOT DONE',\n            originator: 'v2',\n        };\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n",
          "adaptor": "@openfn/language-mssql@latest",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "758680de-beb5-4b26-8d1a-e7c70a141152",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 60
    },
    "GIRL-H-Register": {
      "id": "6c682d56-f79b-4fec-830c-b89896fea26d",
      "name": "GIRL-H Register",
      "edges": {
        "webhook->GIRL-H-Register": {
          "enabled": true,
          "id": "e918bb89-bda3-4a42-81df-b45fef4afc3e",
          "target_job_id": "a04125d3-3b2d-4c77-8de7-5fcda65e39cd",
          "source_trigger_id": "22d7ac24-44bd-45cb-ab1b-d239c2f84822",
          "condition_type": "always",
          "condition_label": "GirlH Trigger",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"GIRL H Register (Monthly)\""
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:16Z",
      "updated_at": "2025-03-12T10:32:09Z",
      "jobs": {
        "GIRL-H-Register": {
          "id": "a04125d3-3b2d-4c77-8de7-5fcda65e39cd",
          "name": "GIRL-H Register",
          "body": "//1. case management\nupsert(\"case_management\", [\"case_id\", \"reporting_period\"],\n    state => ({\n        case_id: dataValue(\"form.case['@case_id']\"),\n        pax_group: dataValue('form.girl_h_demographics_information.pax_group') || \"\",\n        group_name: dataValue('form.girlh_groupdetails.group_name_new') || \"\",\n        group_no: dataValue('form.girlh_groupdetails.groupno') || \"\",\n        reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period'),\n        user_id: dataValue(\"form.case['@user_id']\"),\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        date_modified: dataValue(\"form.case['@date_modified']\"),\n        linked_facility: dataValue('form.girlh_groupdetails.linked_facility'),\n        the_county: dataValue('form.girlh_groupdetails.the_county'),\n        the_cu_name: dataValue('form.girlh_groupdetails.the_cu_name'),\n        the_location: dataValue('form.girlh_groupdetails.the_location'),\n        the_subcounty: dataValue('form.girlh_groupdetails.the_subcounty'),\n        the_village: dataValue('form.girlh_groupdetails.the_village'),\n        the_ward: dataValue('form.girlh_groupdetails.the_ward'),\n        //added on v2\n        facilitated_by: dataValue('form.facilitated_by.facilitator'),\n        username: dataValue('form.meta.username'),\n        app_build_version: dataValue('form.meta.app_build_version'),\n        submit_ip: dataValue('submit_ip'),\n\n        originator: 'v2',//tracking the origin of the forwarder\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n\n//2.girl_h_anthropometric_information\nupsert(\"girl_h_anthropometric_information\", [\"case_id\", \"reporting_period\"],\n    state => {\n        const girlhLactating = dataValue('form.girl_h_anthropometric_information.grilh_lactating')(state);\n        const muacValue = girlhLactating === \"no\" ? 0 : (dataValue('form.girl_h_anthropometric_information.girlh_muacvalue')(state) || 0);\n        let weight = dataValue('form.girl_h_anthropometric_information.girlh_weightkg')(state)||0;\n        let height = dataValue('form.girl_h_anthropometric_information.girlh_heightcm')(state)||0;  \n        let bmi= 0;\n\n        if (height==\"infinity\"){\n            height=0;\n        }\n        \n        if(height!=0 ){\n            height=height/100;\n            bmi = weight / (height * height);\n            bmi=bmi.toFixed(2);\n        }\n        console.log(`This is the BMI value ${bmi}`);\n\n        return {\n            date_created: dataValue(\"form.case['@date_modified']\")(state),\n            case_id: dataValue(\"form.case['@case_id']\")(state),\n            reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period')(state),\n            bmi_calc: dataValue('form.girl_h_anthropometric_information.bmi_calc')(state),\n            bmi_girlhvalue: bmi,\n            girlh_heightcm: dataValue('form.girl_h_anthropometric_information.girlh_heightcm')(state) || 0,\n            girlh_weightkg: dataValue('form.girl_h_anthropometric_information.girlh_weightkg')(state) || 0,\n            girlh_muacvalue: muacValue || 0,\n            muac_membr: dataValue('form.girl_h_anthropometric_information.muac_membr')(state) || 'NOT DONE',\n            originator: 'v2',\n        };\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n\n//3.girl_h_demographics_information\nupsert(\"girl_h_demographics_information\", [\"case_id\", \"reporting_period\"],\n    state => {\n        // const girlhLactating = dataValue('form.girl_h_demographics_information.grilh_lactating')(state);\n        //const muacValue = girlhLactating === \"no\" ? 0 : (dataValue('form.girl_h_demographics_information.girlh_muacvalue')(state) || 0);\n\n        return {\n\n            date_created: dataValue(\"form.case['@date_modified']\")(state),\n            case_id: dataValue(\"form.case['@case_id']\")(state),\n            reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period')(state),\n\n            HHID_hh: dataValue('form.girl_h_demographics_information.HHID_hh')(state),\n            HHID_output: dataValue('form.girl_h_demographics_information.HHID_output')(state),\n            age: dataValue('form.girl_h_demographics_information.age')(state) || 0,\n            girlh_socialstatus: dataValue('form.girl_h_demographics_information.girlh_socialstatus')(state),\n            grilh_lactating: dataValue('form.girl_h_demographics_information.grilh_lactating')(state),\n            grilh_pregnant: dataValue('form.girl_h_demographics_information.grilh_pregnant')(state),\n            group_name: dataValue('form.girlh_groupdetails.group_name_new')(state),\n            hvchildren0to5m: dataValue(\"form.girl_h_demographics_information['hvchildren0to5m']\")(state),\n            hvchildren10to14yrs: dataValue(\"form.girl_h_demographics_information['hvchildren10to14yrs']\")(state),\n            hvchildren15to19yrs: dataValue(\"form.girl_h_demographics_information['hvchildren15to19yrs']\")(state),\n            hvchildren24to59m: dataValue(\"form.girl_h_demographics_information['hvchildren24to59m']\")(state),\n            hvchildren5to9yrs: dataValue(\"form.girl_h_demographics_information['hvchildren5to9yrs']\")(state),\n            hvchildren6to23m: dataValue(\"form.girl_h_demographics_information['hvchildren6to23m']\")(state),\n            new_group_type: dataValue('form.girl_h_demographics_information.new_group_type')(state),\n            no_female5to9yrs: dataValue('form.girl_h_demographics_information.no_female5to9yrs')(state),\n            no_male5to9yrs: dataValue('form.girl_h_demographics_information.no_male5to9yrs')(state),\n            participant_name: dataValue('form.girl_h_demographics_information.participant_name')(state),\n            pax_group: dataValue('form.girl_h_demographics_information.pax_group')(state),\n            sex: dataValue('form.girl_h_demographics_information.sex')(state),\n            originator: 'v2',\n        };\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//4.girl_h_monthly_interventions\nupsert(\"girl_h_monthly_interventions\", [\"case_id\", \"reporting_period\"],\n    state => {\n        // const girlhLactating = dataValue('form.girl_h_demographics_information.grilh_lactating')(state);\n        //const muacValue = girlhLactating === \"no\" ? 0 : (dataValue('form.girl_h_demographics_information.girlh_muacvalue')(state) || 0);\n\n        return {\n            date_created: dataValue(\"form.case['@date_modified']\")(state),\n            case_id: dataValue(\"form.case['@case_id']\")(state),\n            reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period')(state),\n            grp_weekly_sessionscode: dataValue('form.girl_h_monthly_interventions.grp_weekly_sessionscode')(state),\n            interv_healthnutrition: dataValue('form.girl_h_monthly_interventions.interv_healthnutrition')(state),\n            interv_referral: dataValue('form.girl_h_monthly_interventions.interv_referral')(state),\n            interv_referrals: dataValue('form.girl_h_monthly_interventions.interv_referrals')(state),\n            interv_socialservices: dataValue('form.girl_h_monthly_interventions.interv_socialservices')(state),\n            resillient_livelihoods: dataValue('form.girl_h_monthly_interventions.resillient_livelihoods')(state),\n            transition_pathway: dataValue('form.girl_h_monthly_interventions.transition_pathway')(state),\n            week1datetime: dataValue(\"form.girl_h_monthly_interventions['week1datetime']\")(state),\n            week2datetime: dataValue(\"form.girl_h_monthly_interventions['week2datetime']\")(state),\n            week3datetime: dataValue(\"form.girl_h_monthly_interventions['week3datetime']\")(state),\n            week4datetime: dataValue(\"form.girl_h_monthly_interventions['week4datetime']\")(state),\n            weekly_session_attended: dataValue('form.girl_h_monthly_interventions.weekly_session_attended')(state),\n            originator: 'v2',\n        };\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n//5.girl_h_sessions_information\nupsert(\"girl_h_sessions_information\", [\"case_id\", \"reporting_period\"],\n    state => {\n        let ProductServiceSource = dataValue('form.girl_h_sessions_information.sources_of_serviceproduct_or_messageeducation.sources_of_serviceproduct_or_messageeducation_this_monthconfirm_from_source')(state);\n        // Convert sourceValue to an integer\n        //ProductServiceSource = parseInt(ProductServiceSource, 10); // The second argument (10) is for base 10 (decimal)\n        \n        // Check the type of sourceValue\n        console.log(\"Data type of ProductServiceSource:\", typeof ProductServiceSource); // Output: string\n\n        // If the value is a string and we want to convert it to an integer, do so\n        if (typeof ProductServiceSource === 'string') {\n            ProductServiceSource = parseInt(ProductServiceSource, 10); // Convert to integer\n            //console.log(\"Converted ProductServiceSource:\", ProductServiceSource); // Output: 2\n        } else {\n            //console.log(\"The value is not a string, it's already a number or other type.\");\n        }\n\n\n        let sourceValue;\n\n        if (ProductServiceSource === 1) {\n            sourceValue = \"health_facility\";\n        } else if (ProductServiceSource === 2) {\n            sourceValue = \"anchor_group\";\n        } else if (ProductServiceSource === 3) {\n            sourceValue = \"outreach\";\n        } else if (ProductServiceSource === 4) {\n            sourceValue = \"others\";\n        } else {\n            sourceValue = \"unknown_source\";\n        }\n\n        return {\n            date_created: dataValue(\"form.case['@date_modified']\"),\n            case_id: dataValue(\"form.case['@case_id']\"),\n            reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period'),\n            demonstration: dataValue('form.girl_h_sessions_information.demonstration'),\n            products_distributed: dataValue('form.girl_h_sessions_information.products_distributed'),\n            sources_of_serviceproduct: sourceValue,\n            originator: 'v2',\n\n\n        };\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n",
          "adaptor": "@openfn/language-mssql@latest",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "22d7ac24-44bd-45cb-ab1b-d239c2f84822",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 125
    },
    "R4N-Register": {
      "id": "fc466cbb-7c01-4d53-9603-4066a0d9f492",
      "name": "R4N Register",
      "edges": {
        "webhook->R4N-Register": {
          "enabled": true,
          "id": "6e4ceaab-0e1e-4657-9594-86d889e38604",
          "target_job_id": "bc9698d4-9fbd-49b2-ade9-aacd26913662",
          "source_trigger_id": "befd500c-639c-4b36-9ab3-2977c563cf24",
          "condition_type": "js_expression",
          "condition_label": "R4N Trigger",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"REAP 4N Register (Monthly)\"\n"
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:16Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "R4N-Register": {
          "id": "bc9698d4-9fbd-49b2-ade9-aacd26913662",
          "name": "R4N Register",
          "body": "upsert(\n    'case_management',\n    ['case_id', 'reporting_period'],\n    {\n        case_id:dataValue(\"form.case['@case_id']\") ,\n        pax_group:dataValue(\"form['reap4n_demographics_information'].pax_group\")|| \"\",\n        group_name:dataValue(\"form['reap4n_demographics_information'].group_name\")  || \"\",\n        reporting_period:dataValue(\"form['monthly_reap4n_reporting_information'].report_period\") ,\n        user_id:dataValue(\"form.case['@user_id']\") ,\n        date_created:dataValue(\"form.case['@date_modified']\") ,\n        date_modified:dataValue(\"form.case['@date_modified']\"),\n        linked_facility:dataValue('form.case.update.linked_facility'),\n        the_county:dataValue('form.case.update.the_county')||\"\",\n        the_cu_name:dataValue('form.case.update.the_cu_name')||\"\",\n        the_location:dataValue('form.case.update.the_location')||\"\",\n        the_subcounty:dataValue('form.case.update.the_subcounty')||\"\",\n        the_village:dataValue('form.case.update.the_village')||\"\",\n        the_ward:dataValue('form.case.update.the_ward')||\"\",\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);//case management: r4n\nupsert(\n    'reap4n_demographics_information',\n    ['case_id', 'reporting_period'],\n    {\n        case_id:dataValue(\"form.case['@case_id']\") ,\n        reporting_period:dataValue(\"form['monthly_reap4n_reporting_information'].report_period\") ,\n        date_created:dataValue(\"form.case['@date_modified']\"),\n        \n        HHID_hh:dataValue(\"form['reap4n_demographics_information'].HHID_hh\") ,\n        HHID_output:dataValue(\"form['reap4n_demographics_information'].HHID_output\"),\n        age:0,//dataValue(\"form['reap4n_demographics_information'].age\") ,\n        r4n_lactating:dataValue(\"form['reap4n_demographics_information'].grilh_lactating\"),\n        r4n_pregnant:dataValue(\"form['reap4n_demographics_information'].grilh_pregnant\"),\n        group_name:dataValue(\"form['reap4n_demographics_information'].group_name\"),\n        how_many_female_24_59m:dataValue(\"form['reap4n_demographics_information']['how_many_female_24_59m']\"),\n        how_many_male_24_59m:dataValue(\"form['reap4n_demographics_information']['how_many_male_24_59m']\"),\n        hvchildren0to5m:dataValue(\"form['reap4n_demographics_information']['hvchildren0to5m']\"),\n        hvchildren10to14yrs:dataValue(\"form['reap4n_demographics_information']['hvchildren10to14yrs']\"),\n        hvchildren15to19yrs:dataValue(\"form['reap4n_demographics_information']['hvchildren15to19yrs']\"),\n        hvchildren24to59m:dataValue(\"form['reap4n_demographics_information']['hvchildren24to59m']\"),\n        hvchildren5to9yrs:dataValue(\"form['reap4n_demographics_information']['hvchildren5to9yrs']\"),\n        hvchildren6to23m:dataValue(\"form['reap4n_demographics_information']['hvchildren6to23m']\"),\n        new_group_type:dataValue(\"form['reap4n_demographics_information'].new_group_type\"),\n        participant_name:dataValue(\"form['reap4n_demographics_information'].participant_name\"),\n        pax_group:dataValue(\"form['reap4n_demographics_information'].pax_group\"),\n        reap4n_social_status:dataValue(\"form['reap4n_demographics_information']['reap4n_social_status']\"),\n        sex:dataValue(\"form['reap4n_demographics_information'].sex\")\n \n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);//reap4n_demographics_information\nupsert(\n    'reap4n_anthropometric_information',\n    ['case_id', 'reporting_period'],\n    {\n        case_id:dataValue(\"form.case['@case_id']\") ,\n        reporting_period:dataValue(\"form['monthly_reap4n_reporting_information'].report_period\") ,\n        date_created:dataValue(\"form.case['@date_modified']\"),\n        MUAC_status_calc:dataValue(\"form['reap4n_anthropometric_information'].MUAC_status_calc\"),\n      \tbmi_status_calc:dataValue(\"form['reap4n_anthropometric_information'].bmi_status_calc\"),\n      \tbmi_value:dataValue(\"form['reap4n_anthropometric_information'].bmi_value\"),\n      \tmuac_membr: dataValue(\"form['reap4n_anthropometric_information'].muac_membr\"),\n      \tr4nheightcm:dataValue(\"form['reap4n_anthropometric_information']['r4nheightcm']\"),\n      \tr4nweightkg:dataValue(\"form['reap4n_anthropometric_information']['r4nweightkg']\")\n\n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);//reap4n_anthropometric_information\nupsert(\n    'reap4n_monthly_interventions',\n    ['case_id', 'reporting_period'],\n    {\n        case_id:dataValue(\"form.case['@case_id']\") ,\n        reporting_period:dataValue(\"form['monthly_reap4n_reporting_information'].report_period\") ,\n        date_created:dataValue(\"form.case['@date_modified']\"),\n        \n        grp_weekly_sessionscode:dataValue(\"form['reap4n_monthly_interventions'].grp_weekly_sessionscode\"),\n        interv_healthnutrition:dataValue(\"form['reap4n_monthly_interventions'].interv_healthnutrition\"),\n        interv_referral:dataValue(\"form['reap4n_monthly_interventions'].interv_referral\"),\n        interv_referrals:dataValue(\"form['reap4n_monthly_interventions'].interv_referrals\"),\n        interv_socialservices:dataValue(\"form['reap4n_monthly_interventions'].interv_socialservices\"),\n        resillient_livelihoods:dataValue(\"form['reap4n_monthly_interventions'].resillient_livelihoods\")\n       \n    },\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);//reap4n_monthly_interventions\n",
          "adaptor": "@openfn/language-mssql@v4.0.3",
          "project_credential_id": null
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "befd500c-639c-4b36-9ab3-2977c563cf24",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 6
    },
    "SaveHH-Members": {
      "id": "046b418a-f817-4165-9b8b-576b93d7ed7d",
      "name": "SaveHH Members",
      "edges": {
        "webhook->SaveHH-Members": {
          "enabled": true,
          "id": "536daee1-1a77-457f-a15f-a264f01efdab",
          "target_job_id": "0e56ac83-cec8-4757-a10e-4f925eeaab19",
          "source_trigger_id": "f84d5870-4c93-45d9-9131-771cfd3d5cf8",
          "condition_type": "always",
          "condition_label": "Register HH",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"Register HH and Classify Participants\""
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:16Z",
      "updated_at": "2025-04-23T13:57:28Z",
      "jobs": {
        "SaveHH-Members": {
          "id": "0e56ac83-cec8-4757-a10e-4f925eeaab19",
          "name": "SaveHH Members",
          "body": "/*\nfn(state => {\n  const myNumber = Math.floor(Math.random() * 100);\n  //console.log('This is myNumber', myNumber);\n\n  return { ...state, myNumber };\n});\n*/\n\nupsert(\n  'households',\n  'case_id',\n  {\n    number: '0123456789',//this.Math.floor(Math.random() * 100),\n    form_id: dataValue('id'),\n    consent: dataValue('form.hh_information.Participants_consent'),\n    house_hold_id: dataValue('form.Household_information.hh_identification_number'),\n    created_date: dataValue('form.Household_information.date_of_collectiontoday'),\n    family_setup: dataValue('form.Household_information.family_type'),\n    livelihood_zone: dataValue('form.Household_information.livelihood_zone'),\n    functional_latrine: dataValue('form.Household_information.functional_latrine'),\n    water_sources: dataValue('form.Household_information.the_acess_to_safe_water'),\n    other_water_sources: dataValue('form.Household_information.othersstate_if_other_water_sources'),\n    hand_washing_facilities: dataValue('form.Household_information.hand_washing_facilities'),\n    Disposal_facility: dataValue('form.Household_information.refuse_disposal_facility'),\n\n    child_mortal_28_days: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_0_28days'),\n    child_mortal_eleven_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_29days_11months'),\n    child_mortal_fifty_nine_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_12_59months'),\n    maternal_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_maternal_deaths_0_42days'),\n    other_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_otherdeaths_notcounted'),\n\n    county: dataValue('form.Household_information.The_CountyLabel.the_county'),\n    sub_county: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),\n    ward: dataValue('form.Household_information.ward_details.the_ward'),\n    location_l: dataValue('form.Household_information.question5.the_location'),\n    village: dataValue('form.Household_information.thevillage_name.the_village'),\n    new_village: dataValue('form.case.update.is_this_new_village'),\n    system_list: dataValue('form.case.update.new_village'),\n\n    house_hold_size: dataValue('form.Household_information.hh_count'),\n    CU_name: dataValue('form.Household_information.the_cu_name'),\n    linked_facility_in_cu: dataValue('form.Household_information.linked_facility_in_cu'),\n\n    HHID_hh: dataValue('form.Household_information.HHID_hh'),\n\n    completed_time: dataValue('metadata.timeEnd'),\n    started_time: dataValue('metadata.timeStart'),\n    user_name: dataValue('metadata.username'),\n\n    received_on: dataValue('received_on'),\n\n    form_link: dataValue(\"attachments['form.xml']['url']\"), //dataValue('attachments'),\n    hq_user: dataValue('metadata.username'),\n\n    case_id: dataValue('form.case.@case_id'),\n    srtt_village: 'SRTT_VILLAGE' + Math.floor(Math.random() * 100),\n  },\n  {\n    setNull: \"'undefined'\",\n    logValues: true,\n  }\n);\n\n//Looping to get the chidren data\nupsertMany(\n  'hh_members',\n  'case_id',\n  state => {\n    const dataArray = state.data.form.hh_members_registration || [];\n    \n   //if (Array.isArray(dataArray)) {\n    const azureHHmembers = dataArray.map((x, i) => {\n      const hhCodes = x.pax_identifier_information.HHID_output.split('HH');\n      const hhMemberId = `HH${hhCodes[1]}-${i}`;\n      //console.log('The hhMemberId is:', hhMemberId);\n\n      return {\n        //=============================My Loop values:=============\n        number: hhMemberId,\n\n        Participant_id: x.pax_identifier_information.hhm_id,\n\n        fname: x.pax_identifier_information.PAX_info.first_name,\n        mname: x.pax_identifier_information.PAX_info.middle_name,\n        lname: x.pax_identifier_information.PAX_info.last_name,\n        nickname: x.pax_identifier_information.PAX_info.nickname,\n\n        gender: x.pax_identifier_information.PAX_info.sex,\n        dob: x.pax_identifier_information.PAX_info.hhm_dob,\n        mobileno: x.pax_identifier_information.PAX_info.hhm_phone_number,\n\n        id_huduma: x.pax_identifier_information.PAX_info.id_number,\n        relationship: x.pax_identifier_information.PAX_info.hhm_relationship,\n        disability: x.pax_identifier_information.PAX_info.disability,\n        participant_grp: x.pax_identifier_information.persons_info.pax_group,\n\n        female_status: x.pax_identifier_information.special_groups.this_woman_is,\n        // MUAC_value: x.pax_identifier_information.special_groups.MUAC_status_calc,\n        MUAC_value: x.pax_identifier_information.special_groups.muac_value || 0,\n\n        // delivery_date: x.pax_identifier_information.PAX_info.middle_name,\n        source_of_livelihood: x.pax_identifier_information.special_groups.livelihood,\n        mom_child_booklet: x.pax_identifier_information.has_motherchildbooklet,\n        community_unit: x.pax_identifier_information.the_cu_name,\n\n        // TODO: please check where these value are found ------------------\n        //comm_frp_mobile: x.pax_identifier_information.chs_hh.question_list_chusla.chs_contact,\n        comm_frp_mobile:dataValue('form.case.update.chs_contact'),\n        // CHS_hh_number: x.pax_identifier_information.chs_hh.question_list_chusla.CHS_Household_Number,\n        // -----------------------------------------------------------------\n\n        facility_comm_unit: x.pax_identifier_information.linked_facility_in_cu,\n\n        // health_insurance: x.pax_identifier_information.chs_hh.question_list_chusla.do_you_have_health_insurance_cover,\n        // health_insurance_details: x.pax_identifier_information.PAX_info.middle_name,\n\n        // birth_cert: x.pax_identifier_information.PAX_info.middle_name,\n        // birth_cert_no: x.pax_identifier_information.chs_hh.question_list_chusla.birth_certificate_no,\n\n        // orphan: x.pax_identifier_information.chs_hh.question_list_chusla.orphan,\n\n        // other_health_insurance: x.pax_identifier_information.PAX_info.middle_name,\n\n        // schooling: x.pax_identifier_information.chs_hh.question_list_chusla.in_school,\n\n        // vitamin_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_vitamin_a_given || '',\n        // penta_3_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_penta_3_given || '',\n        // immunized: x.pax_identifier_information.chs_hh.question_list_chusla.is_a_child_fully_immunized_under_1_yr_old || '',\n        // measles_rubella_immunized: x.pax_identifier_information.chs_hh.question_list_chusla.measles_rubella_at_2_years || '',\n        // delivery_place: x.pax_identifier_information.chs_hh.question_list_chusla.state_the_place_of_delivery || '',\n\n        full_name: x.pax_identifier_information.PAX_info.pax_full_name,\n        age_months: x.pax_identifier_information.PAX_info.hhm_age_months,\n        hhm_age_years: x.pax_identifier_information.PAX_info.hhm_age_years,\n        under_5: x.pax_identifier_information.PAX_info.under_5,\n        MUAC_status_calc: x.pax_identifier_information.special_groups.MUAC_status_calc || '',\n        family_setup: x.pax_identifier_information.family_setup,\n        orphan_second: x.case.update.orphan,\n        fully_immunized_under_one: x.pax_identifier_information.fully_immunized_under_one,\n\n        functional_latrine: x.pax_identifier_information.functional_latrine,\n        mother_child_booklet: x.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,\n\n        The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),\n        subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),\n        the_ward: x.pax_identifier_information.the_ward,\n        The_location: x.pax_identifier_information.the_location,\n        the_village: x.pax_identifier_information.the_village,\n        srtt_village: 'SRTT_VILLAGE_ ' + x.pax_identifier_information.the_village,\n\n        collected_by: x.pax_identifier_information.user_collected_is,\n        date_of_collection: x.pax_identifier_information.date_of_collection,\n        hhid_output: x.case.update.HHID_output,\n\n        vitamin_a_under1: x.pax_identifier_information['vitamin_a_under1'],\n\n        case_id: x.case['@case_id'],\n        parent_case_id: dataValue('form.case.@case_id'), //foreign key for households\n\n        GPS: x.pax_identifier_information.GPS,\n        date_posted: new Date().toISOString(),\n      };\n    });\n    return azureHHmembers;\n \n  },\n\n  { setNull: false, writeSql: true, logValues: false }\n);\n",
          "adaptor": "@openfn/language-mssql@latest",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": false,
          "id": "f84d5870-4c93-45d9-9131-771cfd3d5cf8",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 14
    },
    "Production-Register": {
      "id": "fe06da7b-adb8-4552-a5f7-27f504c82aba",
      "name": "Production Register",
      "edges": {
        "webhook->Production-Register": {
          "enabled": true,
          "id": "f10281d0-46aa-47fa-96ed-01fe02d5b88c",
          "target_job_id": "31f82349-8559-49e8-a946-11ddae58f2ea",
          "source_trigger_id": "0b6d6f3b-d8be-45e0-aba5-e1252ebfb823",
          "condition_type": "always",
          "condition_label": "Producer Register",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"Producer Register (Monthly)\""
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:12:16Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Production-Register": {
          "id": "31f82349-8559-49e8-a946-11ddae58f2ea",
          "name": "Production Register",
          "body": "\n//1. case management\n\nupsert(\"case_management\", [\"case_id\", \"reporting_period\", \"pax_group\"],\n    state => ({\n        case_id: dataValue(\"form.case['@case_id']\"),\n        user_id: dataValue('metadata.username'),\n        reporting_period: dataValue('form.reporting_period.report_period'),\n        pax_group: \"producer\",\n        group_name: dataValue('form.referencerecords.groupname'),\n        group_no: dataValue('form.referencerecords.producer_group_no'),\n\n        date_created: dataValue(\"form.case['@date_modified']\"),\n        date_modified: dataValue(\"form.case['@date_modified']\"),\n        linked_facility: dataValue('form.girlh_groupdetails.linked_facility'),\n        the_county: dataValue('form.referencerecords.the_county'),\n        the_cu_name: dataValue('form.referencerecords.the_cu_name'),\n        the_location: dataValue('form.referencerecords.the_location'),\n        the_subcounty: dataValue('form.referencerecords.the_subcounty'),\n        the_village: dataValue('form.referencerecords.the_village'),\n        the_ward: dataValue('form.referencerecords.the_ward'),\n\n        //added on v2\n        facilitated_by: dataValue('form.facilitated_by.producer_facilitator'),\n        username: dataValue('form.meta.username'),\n        app_build_version: dataValue('form.meta.app_build_version'),\n        submit_ip: dataValue('submit_ip'),\n        originator: 'v2',//tracking the origin of the forwarder\n\n    }),\n    {\n        setNull: \"'undefined'\",\n        logValues: true,\n    }\n);\n\nfn(state => {\n  const cleanNumber = (value) => {\n    if (value === undefined || value === null) return 0;\n    const cleaned = String(value).replace(/[^\\d.-]/g, '');\n    return isNaN(parseFloat(cleaned)) ? 0 : parseFloat(cleaned);\n  };\n\n  const cleanedData = {\n      case_id: dataValue(\"form.case['@case_id']\")(state),\n      report_period: dataValue('form.reporting_period.report_period')(state),\n      group_no: dataValue('form.referencerecords.producer_group_no'),\n      // ... other non-numeric fields ...\n      type_of_livestock: dataValue('form.livestock_types.livestocks.type_of_livestock'),\n      technology_adopted_livestock: dataValue('form.livestock_types.technology_adopted_livestock'),\n      date_created: dataValue(\"form.case['@date_modified']\"),\n      username: dataValue('metadata.username'),\n      product_distributed_includes: dataValue('form.products_distributed.product_distributed_inlcudes'),\n      \n      HHID_output: dataValue('form.referencerecords.HHID_output'),\n      hhm_age_months: dataValue('form.referencerecords.hhm_age_months'),\n      sex: dataValue('form.referencerecords.sex'),\n      production_type: dataValue('form.pro_type_lbl.production_type'),\n      groupname: dataValue(\"form.referencerecords['groupname']\"),\n      the_county: dataValue('form.referencerecords.the_county'),\n      the_location: dataValue('form.referencerecords.the_location'),\n      the_subcounty: dataValue('form.referencerecords.the_subcounty'),\n      the_village: dataValue('form.referencerecords.the_village'),\n      the_ward: dataValue('form.referencerecords.the_ward'),\n      Amount_from_Sales: dataValue('form.total_amount__from_sales.Amount_from_Sales'),\n      registers_total_amount: dataValue('form.total_amount__from_sales.registers_total_amount'),\n      report_month: dataValue('form.reporting_period.report_month'),\n      report_year: dataValue('form.reporting_period.report_year'),\n      submit_ip: dataValue('submit_ip'),\n      originator: \"v2\",\n\n      type_of_crops: dataValue('form.crop_types.crop.type_of_crops'),\n      technology_adopted_crop: dataValue('form.crop_types.technology_adopted_crop'),\n      demonstrations_ticked: dataValue('form.demonstrations_tick.demonstrations_ticked'),\n      producer_facilitator: dataValue('form.facilitated_by.producer_facilitator'),\n\n\n\n    // Clean numeric fields\n    Amount_from_Sales: cleanNumber(dataValue('form.total_amount__from_sales.Amount_from_Sales')(state)),\n    registers_total_amount: cleanNumber(dataValue('form.total_amount__from_sales.registers_total_amount')(state)),\n    acreage_alv: cleanNumber(dataValue(\"form.crop_types.crop.alv['question8'].acreage_of_land_for_alv\")(state)),\n    alv_qtykg: cleanNumber(dataValue(\"form.crop_types.crop.alv['question8'].alv_qtykg\")(state)),\n    alv_qtykgsold: cleanNumber(dataValue(\"form.crop_types.crop.alv['question8'].alv_qtykgsold\")(state)),\n    amount4_alv: cleanNumber(dataValue(\"form.crop_types.crop.alv['question8']['amount4alv']\")(state)),\n    price4_alv: cleanNumber(dataValue(\"form.crop_types.crop.alv['question8']['price4alv']\")(state)),\n    // ... continue for all numeric fields ...\n    acreage_alv:cleanNumber(dataValue(\"form.crop_types.crop.alv['question8'].acreage_of_land_for_alv\")(state)),\n      alv_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.alv['question8'].alv_qtykg\")(state)),\n      alv_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.alv['question8'].alv_qtykgsold\")(state)),\n      amount4_alv:cleanNumber(dataValue(\"form.crop_types.crop.alv['question8']['amount4alv']\")(state)),\n      price4_alv:cleanNumber(dataValue(\"form.crop_types.crop.alv['question8']['price4alv']\")(state)),\n      \n      acreage_amaranth:cleanNumber(dataValue(\"form.crop_types.crop.amaranth['question10'].acreage_of_land_for_amaranth\")(state)),\n      amaranth_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.amaranth['question10'].amaranth_qtykg\")(state)),\n      amaranth_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.amaranth['question10'].amaranth_qtykgsold\")(state)),\n      amount4_amarantha:cleanNumber(dataValue(\"form.crop_types.crop.amaranth['question10']['amount4amarantha']\")(state)),\n      price4_amaranth:cleanNumber(dataValue(\"form.crop_types.crop.amaranth['question10']['price4amaranth']\")(state)),\n      \n      acreage_butter_nuts:cleanNumber(dataValue(\"form.crop_types.crop.butter_nuts['question12'].acreage_of_land_for_butter_nuts\")(state)),\n      amount4_butternuts:cleanNumber(dataValue(\"form.crop_types.crop.butter_nuts['question12']['amount4butternuts']\")(state)),\n      butter_nuts_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.butter_nuts['question12'].butter_nuts_qtykg\")(state)),\n      butternuts_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.butter_nuts['question12'].butternuts_qtykgsold\")(state)),\n      price4_butternuts:cleanNumber(dataValue(\"form.crop_types.crop.butter_nuts['question12']['price4butternuts']\")(state)),\n      \n      acreage_cowpeas:cleanNumber(dataValue(\"form.crop_types.crop.cowpeas['question11'].acreage_of_land_for_cowpeas\")(state)),\n      amount4_cowpeas:cleanNumber(dataValue(\"form.crop_types.crop.cowpeas['question11']['amount4cowpeas']\")(state)),\n      cowpeas_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.cowpeas['question11'].cowpeas_qtykg\")(state)),\n      cowpeas_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.cowpeas['question11'].cowpeas_qtykgsold\")(state)),\n      price4_cowpeas:cleanNumber(dataValue(\"form.crop_types.crop.cowpeas['question11']['price4cowpeas']\")(state)),\n      \n      acreage_jute_mallow:cleanNumber(dataValue(\"form.crop_types.crop.jute_mallow['question9'].acreage_of_land_for_jute_mallow\")(state)),\n      amount4_jutemallow:cleanNumber(dataValue(\"form.crop_types.crop.jute_mallow['question9']['amount4jutemallow']\")(state)),\n      jute_mallow_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.jute_mallow['question9'].jute_mallow_qtykg\")(state)),\n      jutemallow_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.jute_mallow['question9'].jutemallow_qtykgsold\")(state)),\n      price4_jutemallow:cleanNumber(dataValue(\"form.crop_types.crop.jute_mallow['question9']['price4jutemallow']\")(state)),\n      \n      amount4_kales:cleanNumber(dataValue(\"form.crop_types.crop.kales['question7']['amount4kales']\")(state)),\n      acreage_kales:cleanNumber(dataValue(\"form.crop_types.crop.kales['question7'].kales_land_sizeacres\")(state)),\n      kales_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.kales['question7'].kales_qtykg\")(state)),\n      kales_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.kales['question7'].kales_qtykgsold\")(state)),\n      price4_kales:cleanNumber(dataValue(\"form.crop_types.crop.kales['question7']['price4kales']\")(state)),\n      \n      acreage_onion:cleanNumber(dataValue(\"form.crop_types.crop.onions['question14'].acreage_of_land_for_onion\")(state)),\n      amount4_onions:cleanNumber(dataValue(\"form.crop_types.crop.onions['question14']['amount4onions']\")(state)),\n      onion_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.onions['question14'].onion_qtykg\")(state)),\n      onion_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.onions['question14'].onion_qtykgsold\")(state)),\n      price4_onion:cleanNumber(dataValue(\"form.crop_types.crop.onions['question14']['price4onion']\")(state)),\n      \n      acreage_spinach:cleanNumber(dataValue(\"form.crop_types.crop.spinach['question16'].acreage_of_land_for_spinach\")(state)),\n      amount4_spinch:cleanNumber(dataValue(\"form.crop_types.crop.spinach['question16']['amount4spinch']\")(state)),\n      price4_spinach:cleanNumber(dataValue(\"form.crop_types.crop.spinach['question16']['price4spinach']\")(state)),\n      spinach_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.spinach['question16'].spinach_qtykg\")(state)),\n      spinach_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.spinach['question16'].spinach_qtykgsold\")(state)),\n      \n      acreage_tomatoes:cleanNumber(dataValue(\"form.crop_types.crop.tomatoes['question13'].acreage_of_land_for_tomatoes\")(state)),\n      amount4_tomatoes:cleanNumber(dataValue(\"form.crop_types.crop.tomatoes['question13']['amount4tomatoes']\")(state)),\n      price4_tomatoes:cleanNumber(dataValue(\"form.crop_types.crop.tomatoes['question13']['price4tomatoes']\")(state)),\n      tomatoes_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.tomatoes['question13'].tomatoes_qtykg\")(state)),\n      tomatoes_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.tomatoes['question13'].tomatoes_qtykgsold\")(state)),\n      \n      acreage_water_melon:cleanNumber(dataValue(\"form.crop_types.crop.watermelon['question1'].acreage_of_land_for_water_melon\")(state)),\n      amount4_watermelon:cleanNumber(dataValue(\"form.crop_types.crop.watermelon['question1']['price4watermelon']\")(state)),\n      price4_watermelon:cleanNumber(dataValue(\"form.crop_types.crop.watermelon['question1']['price4watermelon']\")(state)),\n      water_melon_qtykg:cleanNumber(dataValue(\"form.crop_types.crop.watermelon['question1'].water_melon_qtykg\")(state)),\n      watermelon_qtykgsold:cleanNumber(dataValue(\"form.crop_types.crop.watermelon['question1'].watermelon_qtykgsold\")(state)),\n      \n    \n      amount_from_sales_ksh_for_the_goat:cleanNumber(dataValue('form.livestock_types.livestocks.goatsec.amount_from_sales_ksh_for_the_goat')(state)),\n      nogoatraised:cleanNumber(dataValue('form.livestock_types.livestocks.goatsec.nogoatraised')(state)),\n      number_livestock_sold_the_goat:cleanNumber(dataValue('form.livestock_types.livestocks.goatsec.number_livestock_sold_the_goat')(state)),\n      \n      amount_from_sales_ksh_for_poultry:cleanNumber(dataValue('form.livestock_types.livestocks.poultrysec.amount_from_sales_ksh_for_poultry')(state)),\n      nopoultryraised:cleanNumber(dataValue('form.livestock_types.livestocks.poultrysec.nopoultryraised')(state)),\n      number_livestock_sold_poultry:cleanNumber(dataValue('form.livestock_types.livestocks.poultrysec.number_livestock_sold_poultry')(state)),\n      \n      amount_from_sales_ksh_for_the_sheep:cleanNumber(dataValue('form.livestock_types.livestocks.sheepsec.amount_from_sales_ksh_for_the_sheep')(state)),\n      nosheepraised:cleanNumber(dataValue('form.livestock_types.livestocks.sheepsec.nosheepraised')(state)),\n      number_livestock_soldsheep:cleanNumber(dataValue('form.livestock_types.livestocks.sheepsec.number_livestock_soldsheep')(state)),\n      \n      \n  };\n\n  return { ...state, cleanedData };\n});\n\nupsert(\n  'producerregister',\n  [\"case_id\", 'report_period'],\n  state => state.cleanedData,\n  { setNull: \"'undefined'\", logValues: true }\n);\n",
          "adaptor": "@openfn/language-mssql@5.0.10",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "0b6d6f3b-d8be-45e0-aba5-e1252ebfb823",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 33
    },
    "Google-Sheets:-Issue/Log": {
      "id": "be4fcc46-9dac-4556-850a-cb91b97735d1",
      "name": "Google Sheets: Issue/Log",
      "edges": {
        "webhook->Google-Sheets-Issue-Log": {
          "enabled": true,
          "id": "e164ebdc-6de0-46eb-873c-122474011ca6",
          "target_job_id": "431db948-0d34-49d5-9c9a-8794c72fcc47",
          "source_trigger_id": "8baa6b86-67e8-41f8-a287-2355a109e0e4",
          "condition_type": "js_expression",
          "condition_expression": "state.data.form.#type == \"data\" && state.data.form[\"@name\"] == \"Issues/Opportunity Log - Nawiri\"\n"
        }
      },
      "concurrency": null,
      "inserted_at": "2024-07-30T14:27:27Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Google-Sheets-Issue-Log": {
          "id": "431db948-0d34-49d5-9c9a-8794c72fcc47",
          "name": "Google Sheets Issue-Log",
          "body": "\nappendValues({\n  spreadsheetId: '1VbeOf3kR27HqmEhlcMr26lL0S4BH75759nkQkN7KFvg',\n  //spreadsheetId:'1V_Uzdw9cCjzLc3y4gXCYhZxZPcp0MZyWaDifaAwGbxA',\n  range: 'Raw Data!A2:R2',\n  \n  values: [\n    [ \n      dataValue('metadata.username'),\n      dataValue('id'),\n      //dataValue('server_modified_on').substr(1,8),\n      dataValue('metadata.timeEnd'),\n      //new Date(dataValue('metadata.timeEnd')).toString(),\n      //dataValue('metadata.timeEnd').substr(1, 8),\n      dataValue('form.originator_name'),\n      dataValue('form.originator_email'), \n      dataValue(\"form['issue-opportunity_type']\"),\n      dataValue(\"form['question4'].issue_type\")||'',\n      dataValue(\"form['question4'].opportunity_type\")||'',\n      dataValue(\"form['question4'].risk_type\")||'',\n      dataValue(\"form['issue-opportunity_level']\"),\n      dataValue('form.location_level.county'),\n      dataValue('form.location_level.sub_office'),\n      dataValue('form.location_level.ward'),\n      dataValue('form.location_level.cluster_village_srtt'),\n      dataValue('form.location_level.village'),\n      dataValue(\"form['issue-opportunity_description']\"),\n      dataValue(\"form['issue-opportunity_programmatic_pertinence']\"),\n      dataValue(\"form['issue-opportunity_recommended_action']\")\n     \n    ],\n    \n  ],\n})\n",
          "adaptor": "@openfn/language-googlesheets@latest",
          "project_credential_id": null
        }
      },
      "triggers": {
        "webhook": {
          "enabled": false,
          "id": "8baa6b86-67e8-41f8-a287-2355a109e0e4",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 8
    },
    "test": {
      "id": "17bbcba8-f809-4e1e-a5a0-0445d5c3e21f",
      "name": "test",
      "edges": {
        "webhook->Fetch-Patients-Records": {
          "enabled": true,
          "id": "583682fb-f08f-45b2-8854-cd80da022925",
          "target_job_id": "99011ff5-4575-4dfe-8888-c7ee25a266f8",
          "source_trigger_id": "1be79212-fe0c-4a2d-8278-27b631b6a843",
          "condition_type": "always",
          "condition_expression": "state.data.test_user !== True"
        },
        "Fetch-Patients-Records->Add-Member-To-A-HH": {
          "enabled": true,
          "id": "d76b5067-e3bc-42f0-8cbd-33bb6f3201c2",
          "target_job_id": "7f21163f-d515-4849-8fbf-8c4f6e575323",
          "source_job_id": "99011ff5-4575-4dfe-8888-c7ee25a266f8",
          "condition_type": "js_expression",
          "condition_expression": "state.fullHousehold != true;\n"
        },
        "Fetch-Patients-Records->Create-HH-and-Members": {
          "enabled": true,
          "id": "a2149db1-b7c6-4371-87e1-506ce116a1fe",
          "target_job_id": "8fefab01-302e-4925-8719-247d0ea7c6fd",
          "source_job_id": "99011ff5-4575-4dfe-8888-c7ee25a266f8",
          "condition_type": "js_expression",
          "condition_expression": "state.fullHousehold == true\n"
        }
      },
      "concurrency": null,
      "inserted_at": "2024-12-10T11:21:54Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Fetch-Patients-Records": {
          "id": "99011ff5-4575-4dfe-8888-c7ee25a266f8",
          "name": "Fetch Patients Records",
          "body": "/*fn(state => {\n  const currentDate = new Date();\n  const dateString = dateFns.format(currentDate, 'dd_MM_yyyy');\n  const randomPart = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');\n  const randomId = `${dateString}_${randomPart}`;\n\n  console.log(`This is the new name: ${state.data.name}`);\n  console.log(`Generated random ID: ${randomId}`);\n  return {...state, randomId};\n});\n*/\n//check for the array in case of one or several household members\nfn(state => {\n  // Safely access hh_members_registration, defaulting to an empty array if it doesn't exist\n  const dataToProcess = state.data?.form?.hh_members_registration;\n  \n  if (Array.isArray(dataToProcess)) {\n    console.log(`Processing ${dataToProcess.length} records`);\n    // Process the array here\n    const processedData = dataToProcess.map(record => {\n      // Do something with each record\n      return { ...record, processed: true };\n    });\n    return { ...state, processedRecords: processedData,fullHousehold:true};\n  } else {\n    console.log('No array of records found to process');\n    return {...state,fullHousehold:false};\n  }\n});\n",
          "adaptor": "@openfn/language-http@7.0.2",
          "project_credential_id": null
        },
        "Create-HH-and-Members": {
          "id": "8fefab01-302e-4925-8719-247d0ea7c6fd",
          "name": "Create HH and Members",
          "body": "\nupsert(\n  'households',\n  ['case_id'],\n  state => {\n    const caseId = dataValue(\"form.case['@case_id']\")(state);\n    const villageId = dataValue(\"form.Household_information.thevillage_name.the_village\")(state);\n    //const srttVillage = state.references[0].rows[0]?.srtt_village || 'NO SRTT';\n    //console.log('Extracted case_id:', caseId);\n    return {\n      number: Math.floor(Math.random() * 100),\n      case_id: caseId,\n      form_id: dataValue('id'),\n      consent: dataValue('form.hh_information.Participants_consent'),\n      house_hold_id: dataValue('form.Household_information.hh_identification_number'),\n      created_date: dataValue('form.Household_information.date_of_collectiontoday'),\n      family_setup: dataValue('form.Household_information.family_type'),\n      livelihood_zone: dataValue('form.Household_information.livelihood_zone'),\n      functional_latrine: dataValue('form.Household_information.functional_latrine'),\n      water_sources: dataValue('form.Household_information.the_acess_to_safe_water'),\n      other_water_sources: dataValue('form.Household_information.othersstate_if_other_water_sources'),\n      hand_washing_facilities: dataValue('form.Household_information.hand_washing_facilities'),\n      Disposal_facility: dataValue('form.Household_information.refuse_disposal_facility'),\n      child_mortal_28_days: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_0_28days'),\n      child_mortal_eleven_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_29days_11months'),\n      child_mortal_fifty_nine_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_12_59months'),\n      maternal_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_maternal_deaths_0_42days'),\n      other_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_otherdeaths_notcounted'),\n\n      county: dataValue('form.Household_information.The_CountyLabel.the_county'),\n      sub_county: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),\n      ward: dataValue('form.Household_information.ward_details.the_ward'),\n      location_l: dataValue('form.Household_information.question5.the_location'),\n      village: dataValue('form.Household_information.thevillage_name.the_village'),\n      new_village: dataValue('form.case.update.is_this_new_village'),\n      system_list: dataValue('form.case.update.new_village'),\n\n      house_hold_size: dataValue('form.Household_information.hh_count'),\n      CU_name: dataValue('form.Household_information.the_cu_name'),\n      linked_facility_in_cu: dataValue('form.Household_information.linked_facility_in_cu'),\n\n      HHID_hh: dataValue('form.Household_information.HHID_hh'),\n\n      completed_time: dataValue('metadata.timeEnd'),\n      started_time: dataValue('metadata.timeStart'),\n      user_name: dataValue('metadata.username'),\n\n      received_on: dataValue('received_on'),\n\n      form_link: dataValue(\"attachments['form.xml']['url']\"), //dataValue('attachments'),\n      hq_user: dataValue('metadata.username'),\n\n      srtt_village: 'NO SRTT',\n      /*srtt_village: findValue({\n              relation: 'hh_members',\n              where: { the_village: villageId },\n              operator: { the_village: '=' },\n              uuid: 'srtt_village'\n            })(state) || 'NO SRTT',*/\n      originator: 'v2',\n    }\n  },\n  {\n    setNull: \"'undefined'\",\n    logValues: true,\n  }\n);\n\nupsertMany(\n  'hh_members',\n  'case_id',\n  state => {\n    const dataArray = state.data.form.hh_members_registration || [];\n    const azureHHmembers = dataArray.map((x, i) => {\n      const hhId = x.pax_identifier_information.HHID_output.split('HH'); // Assuming this is the household ID\n      const memberNo = `HH${hhId[1]}-${i}`; // Creates a unique member number\n      console.log(memberNo);\n\n      return {\n        case_id: x.case['@case_id'],\n        parent_case_id: state.data.form.case['@case_id'],\n        number: memberNo,\n        Participant_id: x.pax_identifier_information.hhm_id,\n        hhid_output: x.case.update.HHID_output,\n        fname: x.pax_identifier_information.PAX_info.first_name,\n        mname: x.pax_identifier_information.PAX_info.middle_name,\n        lname: x.pax_identifier_information.PAX_info.last_name,\n        nickname: x.pax_identifier_information.PAX_info.nickname,\n        gender: x.pax_identifier_information.PAX_info.sex,\n        dob: x.pax_identifier_information.PAX_info.hhm_dob,\n        mobileno: x.pax_identifier_information.PAX_info.hhm_phone_number,\n        id_huduma: x.pax_identifier_information.PAX_info.id_number,\n        relationship: x.pax_identifier_information.PAX_info.hhm_relationship,\n        disability: x.pax_identifier_information.PAX_info.disability,\n        participant_grp: x.pax_identifier_information.persons_info.pax_group,\n        female_status: x.pax_identifier_information.special_groups.this_woman_is,\n        // MUAC_value: x.pax_identifier_information.special_groups.MUAC_status_calc,\n        MUAC_value: x.pax_identifier_information.special_groups.muac_value || 0,\n        // delivery_date: x.pax_identifier_information.PAX_info.middle_name,\n        source_of_livelihood: x.pax_identifier_information.special_groups.livelihood,\n        mom_child_booklet: x.pax_identifier_information.has_motherchildbooklet,\n        community_unit: x.pax_identifier_information.the_cu_name,\n        comm_frp_mobile: dataValue('form.case.update.chs_contact'),\n        facility_comm_unit: x.pax_identifier_information.linked_facility_in_cu,\n        full_name: x.pax_identifier_information.PAX_info.pax_full_name,\n        age_months: x.pax_identifier_information.PAX_info.hhm_age_months,\n        hhm_age_years: x.pax_identifier_information.PAX_info.hhm_age_years,\n        under_5: x.pax_identifier_information.PAX_info.under_5,\n        MUAC_status_calc: x.pax_identifier_information.special_groups.MUAC_status_calc || '',\n        family_setup: x.pax_identifier_information.family_setup,\n        orphan_second: x.case.update.orphan,\n        fully_immunized_under_one: x.pax_identifier_information.fully_immunized_under_one,\n        functional_latrine: x.pax_identifier_information.functional_latrine,\n        mother_child_booklet: x.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,\n        The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),\n        subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),\n        the_ward: x.pax_identifier_information.the_ward,\n        The_location: x.pax_identifier_information.the_location,\n        the_village: x.pax_identifier_information.the_village,\n        schooling: x.pax_identifier_information.chs_hh.in_school||'',\n\n        srtt_village: 'SRTT_VILLAGE_ ' + x.pax_identifier_information.the_village,\n\n        collected_by: x.pax_identifier_information.user_collected_is,\n        date_of_collection: x.pax_identifier_information.date_of_collection,\n        hhid_output: x.case.update.HHID_output,\n        vitamin_a_under1: x.pax_identifier_information['vitamin_a_under1'],\n        GPS: x.pax_identifier_information.GPS,\n\n        originator: 'v2',\n        //is_head_of_household: i === 0 ? true : false,\n        date_posted: new Date().toISOString(),\n        //updated_at: new Date().toISOString()\n      };\n    });\n\n    //console.log('Data to upsert:', JSON.stringify(azureHHmembers, null, 2));\n    return azureHHmembers;\n  },\n  { setNull: false, writeSql: true, logValues: true }\n);\n",
          "adaptor": "@openfn/language-mssql@5.0.10",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        },
        "Add-Member-To-A-HH": {
          "id": "7f21163f-d515-4849-8fbf-8c4f6e575323",
          "name": "Add Member To A HH",
          "body": "/*fn(state => {\n  console.log(`This is a single Member ${state.fullHousehold}`);\n  return state;\n});\n\nsql(state => ({\n  query: `SELECT * FROM hh_members WHERE hhid_output = '${state.fullHousehold}'`\n}));\n\n//add the member to the hh_members\n*/\nfn(state => {\n  const myConsent = dataValue('form.hh_information.Participants_consent');\n  return { ...state, myConsent };\n});\n\nupsert(\n  'households',\n  ['case_id'],\n  state => {\n    const caseId = dataValue(\"form.case['@case_id']\")(state);\n    const villageId = dataValue(\"form.Household_information.thevillage_name.the_village\")(state);\n    //const srttVillage = state.references[0].rows[0]?.srtt_village || 'NO SRTT';\n    //console.log('Extracted case_id:', caseId);\n    return {\n      number: Math.floor(Math.random() * 100),\n      case_id: caseId,\n      form_id: dataValue('id'),\n      consent: dataValue('form.hh_information.Participants_consent'),\n      house_hold_id: dataValue('form.Household_information.hh_identification_number'),\n      created_date: dataValue('form.Household_information.date_of_collectiontoday'),\n      family_setup: dataValue('form.Household_information.family_type'),\n      livelihood_zone: dataValue('form.Household_information.livelihood_zone'),\n      functional_latrine: dataValue('form.Household_information.functional_latrine'),\n      water_sources: dataValue('form.Household_information.the_acess_to_safe_water'),\n      other_water_sources: dataValue('form.Household_information.othersstate_if_other_water_sources'),\n      hand_washing_facilities: dataValue('form.Household_information.hand_washing_facilities'),\n      Disposal_facility: dataValue('form.Household_information.refuse_disposal_facility'),\n      child_mortal_28_days: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_0_28days'),\n      child_mortal_eleven_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_29days_11months'),\n      child_mortal_fifty_nine_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_12_59months'),\n      maternal_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_maternal_deaths_0_42days'),\n      other_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_otherdeaths_notcounted'),\n\n      county: dataValue('form.Household_information.The_CountyLabel.the_county'),\n      sub_county: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),\n      ward: dataValue('form.Household_information.ward_details.the_ward'),\n      location_l: dataValue('form.Household_information.question5.the_location'),\n      village: dataValue('form.Household_information.thevillage_name.the_village'),\n      new_village: dataValue('form.case.update.is_this_new_village'),\n      system_list: dataValue('form.case.update.new_village'),\n\n      house_hold_size: dataValue('form.Household_information.hh_count'),\n      CU_name: dataValue('form.Household_information.the_cu_name'),\n      linked_facility_in_cu: dataValue('form.Household_information.linked_facility_in_cu'),\n\n      HHID_hh: dataValue('form.Household_information.HHID_hh'),\n\n      completed_time: dataValue('metadata.timeEnd'),\n      started_time: dataValue('metadata.timeStart'),\n      user_name: dataValue('metadata.username'),\n\n      received_on: dataValue('received_on'),\n\n      form_link: dataValue(\"attachments['form.xml']['url']\"), //dataValue('attachments'),\n      hq_user: dataValue('metadata.username'),\n\n      srtt_village: 'NO SRTT',\n      /*srtt_village: findValue({\n              relation: 'hh_members',\n              where: { the_village: villageId },\n              operator: { the_village: '=' },\n              uuid: 'srtt_village'\n            })(state) || 'NO SRTT',*/\n      originator: 'v2',\n    }\n  },\n  {\n    setNull: \"'undefined'\",\n    logValues: true,\n  }\n);\n//====add the member to the household\nif (state.myConsent == 'agree') {\n  upsert(\n    'hh_members',\n    ['case_id'],\n    state => {\n      const parentCaseId = dataValue(\"form.case['@case_id']\")(state);\n      //console.log('Parent case_id:', parentCaseId);\n      const memberArray = state.data.form.hh_members_registration\n      // Let's try to find the member case_id\n      let caseId;\n      if (state.data.form.hh_members_registration) {\n        //console.log('there is some data in here');\n        caseId = memberArray.case['@case_id'];\n\n        //console.log('Member case_id:', caseId);\n\n\n        return {\n          number: Math.floor(Math.random() * 100),\n          parent_case_id: parentCaseId,\n          case_id: caseId,\n          Participant_id: memberArray.pax_identifier_information.hhm_id,\n          fname: memberArray.pax_identifier_information.PAX_info.first_name,\n          mname: memberArray.pax_identifier_information.PAX_info.middle_name,\n          lname: memberArray.pax_identifier_information.PAX_info.last_name,\n          nickname: memberArray.pax_identifier_information.PAX_info.nickname,\n\n          gender: memberArray.pax_identifier_information.PAX_info.sex,\n          dob: memberArray.pax_identifier_information.PAX_info.hhm_dob,\n          mobileno: memberArray.pax_identifier_information.PAX_info.hhm_phone_number,\n          id_huduma: memberArray.pax_identifier_information.PAX_info.id_number,\n          relationship: memberArray.pax_identifier_information.PAX_info.hhm_relationship,\n          disability: memberArray.pax_identifier_information.PAX_info.disability,\n          participant_grp: memberArray.pax_identifier_information.persons_info.pax_group,\n          female_status: memberArray.pax_identifier_information.special_groups.this_woman_is,\n          MUAC_value: memberArray.pax_identifier_information.special_groups.muac_value || 0,\n          source_of_livelihood: memberArray.pax_identifier_information.special_groups.livelihood,\n          mom_child_booklet: memberArray.pax_identifier_information.has_motherchildbooklet,\n          community_unit: memberArray.pax_identifier_information.the_cu_name,\n          comm_frp_mobile: dataValue('form.case.update.chs_contact'),\n          CHS_hh_number: dataValue('form.Household_information.is_this_new_village.CHS_Household_Number'),\n          facility_comm_unit: memberArray.pax_identifier_information.linked_facility_in_cu,\n\n          // health_insurance: memberArray.pax_identifier_information.chs_hh.do_you_have_health_insurance_cover,\n          // health_insurance_details: memberArray.pax_identifier_information.chs_hh.you_have_selected_do_you_have_health_insurance_cover_kindly_specifiy_which_,\n          // health_insurance_details: memberArray.pax_identifier_information.chs_hh.health_insurance_cover_details||'',\n\n          // birth_cert: memberArray.pax_identifier_information.chs_hh.birth_certificate_no||'',\n          //birth_cert_no: memberArray.pax_identifier_information.chs_hh.birth_certificate_details||'',\n\n          // orphan: memberArray.chs_hh.question_list_chusla.orphan,\n\n          // other_health_insurance: memberArray.PAX_info.middle_name,\n\n          // schooling: memberArray.chs_hh.question_list_chusla.in_school,\n\n          // vitamin_given: memberArray.chs_hh.question_list_chusla.was_vitamin_a_given || '',\n          // penta_3_given: memberArray.chs_hh.question_list_chusla.was_penta_3_given || '',\n          // immunized: memberArray.chs_hh.question_list_chusla.is_a_child_fully_immunized_under_1_yr_old || '',\n          // measles_rubella_immunized: memberArray.chs_hh.question_list_chusla.measles_rubella_at_2_years || '',\n          // delivery_place: memberArray.chs_hh.question_list_chusla.state_the_place_of_delivery || '',\n\n          full_name: memberArray.pax_identifier_information.PAX_info.pax_full_name,\n          age_months: memberArray.pax_identifier_information.PAX_info.hhm_age_months,\n          hhm_age_years: memberArray.pax_identifier_information.PAX_info.hhm_age_years,\n          under_5: memberArray.pax_identifier_information.PAX_info.under_5,\n          MUAC_status_calc: memberArray.pax_identifier_information.special_groups.MUAC_status_calc || '',\n          family_setup: memberArray.pax_identifier_information.family_setup,\n          orphan_second: memberArray.case.update.orphan,\n          fully_immunized_under_one: memberArray.pax_identifier_information.fully_immunized_under_one,\n\n          functional_latrine: memberArray.pax_identifier_information.functional_latrine,\n          mother_child_booklet: memberArray.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,\n\n          The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),\n          subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),\n          the_ward: memberArray.pax_identifier_information.the_ward,\n          The_location: memberArray.pax_identifier_information.the_location,\n          the_village: memberArray.pax_identifier_information.the_village,\n          srtt_village: 'SRTT_VILLAGE_ ' + memberArray.pax_identifier_information.the_village,\n\n          collected_by: memberArray.pax_identifier_information.user_collected_is,\n          date_of_collection: memberArray.pax_identifier_information.date_of_collection,\n          hhid_output: memberArray.case.update.HHID_output,\n\n          vitamin_a_under1: memberArray.pax_identifier_information['vitamin_a_under1'],\n          GPS: memberArray.pax_identifier_information.GPS,\n          date_posted: new Date().toISOString(),\n\n          srtt_village: 'NO SRTT',\n          originator: 'v2',\n        };\n      } else {\n        return null;\n      }\n    },\n    {\n      setNull: \"'undefined'\",\n      logValues: true,\n    }\n  );\n}\n",
          "adaptor": "@openfn/language-mssql@5.0.11",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "1be79212-fe0c-4a2d-8278-27b631b6a843",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 121
    },
    "Producer-Mapping": {
      "id": "36164ba1-e9c5-4b4e-845d-3a2f92d171a9",
      "name": "Producer Mapping",
      "edges": {
        "webhook->Map-Producer-To-Group": {
          "enabled": true,
          "id": "0cfbeb46-b04b-4a62-84e7-0b4a0304150d",
          "target_job_id": "7cf751f5-bf85-426e-89d2-a84f8b6f143f",
          "source_trigger_id": "ce195947-63d9-4fc5-8829-cf3c834a4ca2",
          "condition_type": "always",
          "condition_label": "Get JSON data from webhook"
        }
      },
      "concurrency": null,
      "inserted_at": "2025-04-07T12:44:11Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Map-Producer-To-Group": {
          "id": "7cf751f5-bf85-426e-89d2-a84f8b6f143f",
          "name": "Map Producer To Group",
          "body": "fn\n",
          "adaptor": "@openfn/language-mssql@5.0.10",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "ce195947-63d9-4fc5-8829-cf3c834a4ca2",
          "type": "webhook"
        }
      },
      "deleted_at": null,
      "lock_version": 6
    },
    "CommCare-to-Azure-SQL": {
      "id": "481ec3b2-c9c5-4ba1-9cda-b8933965394e",
      "name": "CommCare-to-Azure-SQL",
      "edges": {
        "Fetch-CommCare-Forms->Transform-Data": {
          "enabled": true,
          "id": "8af51fca-5021-46f7-8969-bc9ae693fd64",
          "target_job_id": "544ab003-5681-4e2e-8b61-ae1c9e90458b",
          "source_job_id": "bf298a04-7b4b-4e57-89cd-47ec56ca16c5",
          "condition_type": "on_job_success"
        },
        "Transform-Data->Load-to-Azure-SQL": {
          "enabled": true,
          "id": "68932756-9ccd-4439-854b-324f3f25cb99",
          "target_job_id": "99c0993c-f5f3-4ed1-8b7a-0f73b0fc1311",
          "source_job_id": "544ab003-5681-4e2e-8b61-ae1c9e90458b",
          "condition_type": "on_job_success"
        },
        "cron->Fetch-CommCare-Forms": {
          "enabled": true,
          "id": "76787f70-fc50-40f5-896b-c09ab413cded",
          "target_job_id": "bf298a04-7b4b-4e57-89cd-47ec56ca16c5",
          "source_trigger_id": "2f66e96a-bd99-458f-8bfa-1578746f50a6",
          "condition_type": "always"
        }
      },
      "concurrency": null,
      "inserted_at": "2025-06-05T09:14:51Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Fetch-CommCare-Forms": {
          "id": "bf298a04-7b4b-4e57-89cd-47ec56ca16c5",
          "name": "Fetch CommCare Forms",
          "body": "/*fn(state => {\n  console.log(\"Credentials configuration:\", {\n    username: state.configuration.username,\n    apiKeyExists: !!state.configuration.apiKey,\n    hostUrl: state.configuration.hostUrl\n  });\n  return state;\n});\n*/\n// At the beginning of your job\ncursor(state => {\n  // Default to a date in the past if no cursor exists yet\n  return state.cursor || '2025-01-01';\n},\n  { format: d => dateFns.format(new Date(d), 'yyyy-MM-dd') });\n\nfn(state=>{\n  console.log(state.cursor);\n  return state;\n});\n\n// Proper chaining using .then(). \n//We are selecting 5 submissions at a time to avoid memory choke\nget('/form/', {\n  xmlns: 'http://openrosa.org/formdesigner/D24D9B0E-E111-48B0-A631-5D15B7F88374',\n  limit: 1000,\n  received_on_start: state => state.cursor,\n  received_on_end: '2025-12-31'\n})\n  .then(state => {\n    console.log(\"Response status:\", state.response.statusCode);\n    console.log(\"Response body:\", state.data);\n    return state;\n  });\n",
          "adaptor": "@openfn/language-commcare@latest",
          "project_credential_id": "b6ddedf7-6dd4-4a04-9481-db33f3ae5ea9"
        },
        "Transform-Data": {
          "id": "544ab003-5681-4e2e-8b61-ae1c9e90458b",
          "name": "Transform Data",
          "body": "// Add operations here\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": null
        },
        "Load-to-Azure-SQL": {
          "id": "99c0993c-f5f3-4ed1-8b7a-0f73b0fc1311",
          "name": "Load to Azure SQL",
          "body": "fn(state => {\n  const submissions = state.data || [];\n  console.log(`Processing ${submissions.length} submissions for SQL Server`);\n\n  // Transform data for SQL insertion\n  // This maps CommCare form fields to your SQL table columns\n  state.sqlRecords = submissions.map(submission => {\n    \n    const formData = submission.form || {};\n    const saInfo = formData.sa_info || {};\n\n    const caseData = formData.case || {}\n    const createData = caseData.create || {}\n//console.log(`This is inside - ${saInfo.name_of_sa || ''}`);\n\n    //console.log(submission)\n    try {\n      //console.log(`Processing submission with case ID: ${caseData[\"@case_id\"] || 'unknown'}`);\n      // Parse GPS data\n      let latitude = '';\n      let longitude = '';\n      let altitude = '';\n      let accuracy = '';\n      \n      if (saInfo.gps) {\n        // GPS format from CommCare is typically: \"latitude longitude altitude accuracy\"\n        const gpsValues = saInfo.gps.split(' ');\n        if (gpsValues.length >= 4) {\n          latitude = gpsValues[0];\n          longitude = gpsValues[1];\n          altitude = gpsValues[2];\n          accuracy = gpsValues[3];\n        }\n      }\n\n      // Format date values properly\n      let dataEntryDate = null;\n      if (saInfo.data_entry_date) {\n        // Try to create a valid date object - if it fails, leave as null\n        try {\n          // Parse the date - adjust this based on your actual date format\n          const parsedDate = new Date(saInfo.data_entry_date);\n          if (!isNaN(parsedDate.getTime())) {\n            // Format as ISO string which SQL Server can handle\n            dataEntryDate = parsedDate.toISOString();\n          }\n        } catch (e) {\n          console.log(`Error parsing date ${saInfo.data_entry_date}: ${e.message}`);\n        }\n      }\n\n\n      // Format created date\n      let createdDate = null;\n      if (submission.received_on) {\n        try {\n          const parsedDate = new Date(submission.received_on);\n          if (!isNaN(parsedDate.getTime())) {\n            createdDate = parsedDate.toISOString();\n          }\n        } catch (e) {\n          console.log(`Error parsing received_on date: ${e.message}`);\n        }\n      }\n      \n      // Check for subcases - look through subcase0 to subcase17\n      let childCaseID = 'childCaseID';\n      let childCaseName = 'childCaseName';\n      let childCaseType = 'childCaseType';\n      \n      for (let i = 0; i <= 17; i++) {\n        const subcaseKey = `subcase_${i}`;\n       // console.log(`This is my subcase -${subcaseKey}`);\n        //console.log(`This is my subcase Data -${formData.subcaseKey}`);\n\n        if (formData[subcaseKey] && formData[subcaseKey].case[\"@case_id\"]) {\n          childCaseID = formData[subcaseKey].case[\"@case_id\"];\n          \n          // Check if there's a create section with case_name\n          if (formData[subcaseKey].case.create && formData[subcaseKey].case.create.case_name) {\n            childCaseName = formData[subcaseKey].case.create.case_name;\n          }\n          \n          // Check if there's a create section with case_type\n          if (formData[subcaseKey].case.create && formData[subcaseKey].case.create.case_type) {\n            childCaseType = formData[subcaseKey].case.create.case_type;\n          }\n          \n          // Found a valid subcase, no need to check more\n          break;\n        }\n      }\n      \n      return {\n        CaseId: formData.case[\"@case_id\"],\n        ActorName: saInfo.name_of_sa || '',\n        ActorCategory: formData.sa_info.category_of_system_actor,\n        CaseName: formData.case.create.case_name,\n        CaseType: formData.case.create.case_type,\n        FirstName: formData.sa_info.owners_first_name,\n        LastName: formData.sa_info.owners_last_name,\n        FullName: formData.sa_info.Contact_full_name_owner,\n        PhoneNo: formData.sa_info.phone_number,\n        County: formData.sa_info.county,\n        SubCounty: saInfo[\"sub-county\"],\n        Ward: formData.sa_info.ward,\n        Location: formData.sa_info.location,\n        Village: formData.sa_info.village,\n\n        PurposeArea: formData.sa_info.purpose_areas,\n        DataEntryDate: dataEntryDate,\n        GPSConsent: formData.sa_info.gps_consent,\n        ConsentAgreed: formData.consent_agreed,\n        DataCollector: formData.sa_info.name_of_data_collector,\n        Latitude: latitude,\n        Longitude: longitude,\n        Altitude: altitude,\n        Accuracy: accuracy,\n        CreatedDate: createdDate,\n        ChildCaseID: childCaseID,\n        ChildCaseName: childCaseName,\n        ChildCaseType: childCaseType,\n        Username: formData.meta.username,\n\n        // Add calculated fields if needed\n        submission_year: new Date(submission.received_on).getFullYear(),\n        data_source: 'CommCare'\n      };\n    } catch (error) {\n      console.log(`Error processing submission: ${error.message}`);\n      // Return a minimal record or skip this record\n      return null;\n    }\n  }).filter(record => record !== null);\n\n  console.log(`Prepared ${state.sqlRecords.length} records for SQL insertion`);\n  return state;\n});\n\n\n\n\n// After your data processing, \n//update the cursor to the most recent date\nfn(state => {\n  if (state.data && state.data.length > 0) {\n    // Find the most recent received_on date from all the processed submissions\n    console.log(\"Cursor update starts here\");\n\n    const dates = state.data\n      .map(submission => submission.received_on)\n      .filter(date => date) // Remove any undefined dates\n      .map(dateStr => new Date(dateStr));\n    \n    if (dates.length > 0) {\n      const mostRecentDate = new Date(Math.max(...dates));\n      // Update the cursor to the most recent date for next run\n      state.cursor = mostRecentDate.toISOString();\n      console.log(`Setting cursor to ${state.cursor} for next run`);\n\n      // At the end of your job, ensure the cursor is saved\n      cursor(state => state.cursor);\n    }\n  }\n\n  return state;\n});\n\n\n\n\n// Step 3: Insert data into SQL Server\neach('sqlRecords[*]',\n  upsert('SystemActors',['CaseID'],\n    state => ({\n      CaseId: state.data.CaseId,\n      ActorName: state.data.ActorName,\n      ActorCategory: state.data.ActorCategory,\n      CaseName: state.data.CaseName,\n      CaseType: state.data.CaseType,\n      FirstName: state.data.FirstName,\n      LastName: state.data.LastName,\n      FullName: state.data.FullName,\n      PhoneNo: state.data.PhoneNo,\n      County: state.data.County,\n      SubCounty: state.data.SubCounty,\n      Ward: state.data.Ward,\n      Location: state.data.Location,\n      Village: state.data.Village,\n      PurposeArea: state.data.PurposeArea,\n      DataEntryDate: state.data.DataEntryDate,\n      GPSConsent: state.data.GPSConsent,\n      ConsentAgreed: state.data.ConsentAgreed,\n      DataCollector: state.data.DataCollector,\n      Latitude: state.data.Latitude,\n      Longitude: state.data.Longitude,\n      Altitude: state.data.Altitude,\n      Accuracy: state.data.Accuracy,\n      CreatedDate: state.data.CreatedDate,\n      ChildCaseID: state.data.ChildCaseID,\n      ChildCaseName: state.data.ChildCaseName,\n      ChildCaseType: state.data.ChildCaseType,\n      data_source:state.data.data_source,\n      Username: state.data.Username,\n    })\n  )\n);\n",
          "adaptor": "@openfn/language-mssql@latest",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "cron": {
          "enabled": true,
          "id": "2f66e96a-bd99-458f-8bfa-1578746f50a6",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "deleted_at": null,
      "lock_version": 72
    },
    "Fetch-Members-From-Commcare": {
      "id": "9c4409ab-ddba-4f69-817c-3628174221c4",
      "name": "Fetch Members From Commcare",
      "edges": {
        "Transform-Data->Load-to-Azure-SQL": {
          "enabled": true,
          "id": "13b6cbfa-b93f-4406-85bb-0221c340c970",
          "target_job_id": "e804c262-4034-423e-80cb-4f8d13473b42",
          "source_job_id": "87f3b312-12fd-4e7c-8f32-c1c3543e99a6",
          "condition_type": "on_job_success"
        },
        "Fetch-CommCare-Forms->Transform-Data": {
          "enabled": true,
          "id": "09ce0d79-3dad-4d38-8888-1e1bb11391d7",
          "target_job_id": "87f3b312-12fd-4e7c-8f32-c1c3543e99a6",
          "source_job_id": "7467080f-92ef-4791-8f28-64d3b56c1197",
          "condition_type": "on_job_success"
        },
        "cron->Fetch-CommCare-Forms": {
          "enabled": true,
          "id": "74e2bc96-f01b-41e1-82cf-e4ab03d09078",
          "target_job_id": "7467080f-92ef-4791-8f28-64d3b56c1197",
          "source_trigger_id": "9d105949-5493-4974-8f5e-d048341c4e32",
          "condition_type": "always"
        }
      },
      "concurrency": null,
      "inserted_at": "2025-06-13T04:19:49Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Fetch-CommCare-Forms": {
          "id": "7467080f-92ef-4791-8f28-64d3b56c1197",
          "name": "Fetch CommCare Forms",
          "body": "// Update the persistent cursor\ncursor(state => '2024-11-05');\n// Set up initial cursor to today if not already set\ncursor(state => state.cursor || 'today', \n  { format: d => dateFns.format(new Date(d), 'yyyy-MM-dd') });\n\n// Get data and process it immediately\nget('/form/', state => {\n  const endDate = state.cursor;\n  \n  // Calculate start date as 7 days before end date\n  const endDateObj = new Date(endDate);\n  const startDateObj = new Date(endDateObj);\n  startDateObj.setDate(endDateObj.getDate() - 1);\n  \n  // Don't go earlier than Jan 2022\n  const earliestDate = new Date('2022-01-01');\n  const startDate = dateFns.format(\n    startDateObj > earliestDate ? startDateObj : earliestDate, \n    'yyyy-MM-dd'\n  );\n  \n  // Store these dates in state for logging\n  state.currentQueryDates = {\n    start: startDate,\n    end: endDate\n  };\n  \n  return {\n    xmlns: 'http://openrosa.org/formdesigner/158EB23A-DCFF-4680-90DA-A52D95628A8C',\n    limit: 100, // Adjust limit based on record size\n    received_on_end: endDate,\n    received_on_start: startDate\n  };\n});\n\n// Process results and update cursor in one step\nfn(state => {\n  console.log(`Retrieved ${state.data.length} records from ${state.currentQueryDates.start} to ${state.currentQueryDates.end}`);\n  \n  // Process your data here\n  // ...\n  \n  // Move the cursor back for the next chunk\n  const currentDate = new Date(state.cursor);\n  const newCursorDate = new Date(currentDate);\n  newCursorDate.setDate(currentDate.getDate() - 1);\n  \n  // Stop if we've reached Jan 2022\n  const earliestDate = new Date('2022-01-01');\n  if (newCursorDate < earliestDate) {\n    console.log(\"Reached January 2022 - processing complete\");\n    state.complete = true;\n    state.cursor = dateFns.format(new Date(), 'yyyy-MM-dd'); // Reset to today\n  } else {\n    state.cursor = dateFns.format(newCursorDate, 'yyyy-MM-dd');\n    console.log(\"Next cursor date:\", state.cursor);\n  }\n  \n  return state;\n});\n\n// Update the persistent cursor\ncursor(state => state.cursor);\n",
          "adaptor": "@openfn/language-commcare@latest",
          "project_credential_id": "b6ddedf7-6dd4-4a04-9481-db33f3ae5ea9"
        },
        "Transform-Data": {
          "id": "87f3b312-12fd-4e7c-8f32-c1c3543e99a6",
          "name": "Transform Data",
          "body": "// Add operations here\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": null
        },
        "Load-to-Azure-SQL": {
          "id": "e804c262-4034-423e-80cb-4f8d13473b42",
          "name": "Load to Azure SQL",
          "body": "\n//1. Reduce redundant code with destructuring:\n\nfn(state => {\n  const submissions = state.data || [];\n  console.log(`Processing ${submissions.length} submissions for SQL Server`);\n\n  // Initialize array directly on state\n  state.sqlRecords = submissions.flatMap(submission => {\n    const { form = {} } = submission;\n    const { Household_information = {}, case: formCase = {}, hh_members_registration = [] } = form;\n    const membersArray = Array.isArray(hh_members_registration) ? hh_members_registration : [hh_members_registration];\n    \n    console.log(`This is Household case ID - ${formCase['@case_id']}`);\n    \n    // Use flatMap to filter out invalid members\n    return membersArray\n      .filter(member => member?.case?.['@case_id'])\n      .map(member => {\n        const { case: memberCase = {}, pax_identifier_information = {} } = member;\n        const { update = {} } = formCase;\n        const { update: memberUpdate = {} } = memberCase;\n        \n        console.log(`Processing member Case ID - ${memberCase['@case_id']}`);\n        \n        return {\n          parentCaseId: formCase[\"@case_id\"],\n          householdID: Household_information.is_this_new_village?.CHS_Household_Number || 999,\n          caseID: memberCase[\"@case_id\"],\n          // Location info\n          County: update.the_county,\n          SubCounty: update.the_subcounty,\n          Ward: update.the_ward,\n          Location: update.the_location,\n          Village: update.the_village,\n          CUName: update.the_cu_name,\n          LivelihoodZone: update.livelihood_zone,\n          Livelihood: update.livelihood,\n          FamilySetup: update.family_type,\n          Disability: update.disability,\n          // Member info\n          AgeInYears: pax_identifier_information.hhm_age_years,\n          AgeInMonths: pax_identifier_information.hhm_age_months,\n          UserName: pax_identifier_information.user_collected_is,\n          Sex: memberUpdate.sex,\n          Middlename: memberUpdate.middlename,\n          LastName: memberUpdate.last_name,\n          FirstName: memberUpdate.first_name,\n          NickName: memberUpdate.nickname,\n          HhmID: pax_identifier_information.hhm_id,\n          HHID_output: memberUpdate.HHID_output,\n          IDNumber: memberUpdate.id_number,\n          MobileNo: memberUpdate.hhm_phone_number,\n          ColletionDate: memberUpdate.date_of_collectiontoday,\n          BirthDate: memberUpdate.hhm_dob,\n          FemaleStatus: memberUpdate.this_woman_is,\n          RelationShip: memberUpdate.hhm_relationship,\n          DatePosted: new Date().toISOString().split('T')[0],\n          submission_year: new Date(submission.received_on).getFullYear(),\n          data_source: 'CommCare'\n        };\n      });\n  });\n\n  console.log(`Prepared ${state.sqlRecords.length} records for SQL insertion`);\n  return state;\n});\n\n\n // Insert data into SQL Server\n  each('sqlRecords[*]',\n    upsert('hh_members_test', 'case_id',\n      state => ({\n        parent_case_id: state.data.parentCaseId,\n        case_id: state.data.caseID,\n        household_id: state.data.householdID,\n        //names\n          \n        gender:state.data.Sex,\n        fname:state.data.FirstName,\n        mname:state.data.Middlename,\n        lname:state.data.LastName,\n        nickname:state.data.NickName,\n  \n        hhid_output:state.data.HHID_output,\n        participant_id:state.data.HhmID,\n  \n        dob:state.data.BirthDate,\n        id_huduma:state.data.IDNumber,\n        mobileno:state.data.MobileNo,\n        relationship:state.data.RelationShip,\n        female_status:state.data.FemaleStatus,\n  \n        the_county:state.data.County,\n        subcounty:state.data.SubCounty,\n        the_ward:state.data.Ward,\n        the_location:state.data.Location,\n        the_village:state.data.Village,\n  \n        community_unit:state.data.CUName,\n        //the_village:state.data.LivelihoodZone,\n        //the_village:state.data.Livelihood,\n        family_setup:state.data.FamilySetup,\n        disability:state.data.Disability,\n        hhm_age_years:state.data.AgeInYears,\n        curr_age_months:state.data.AgeInMonths,\n        collected_by:state.data.UserName,\n        date_of_collection:state.data.ColletionDate,\n        date_posted:state.data.DatePosted,\n        originator:'v2',\n  \n  \n  \n  \n  \n      })\n    )\n  );\n",
          "adaptor": "@openfn/language-mssql@latest",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "9d105949-5493-4974-8f5e-d048341c4e32",
          "type": "cron",
          "cron_expression": "00 * * * *"
        }
      },
      "deleted_at": null,
      "lock_version": 89
    },
    "Fisheries-Register": {
      "id": "e1675eb3-d432-41d3-84d1-05e0140fd887",
      "name": "Fisheries Register",
      "edges": {
        "cron->Fetch-Fisheries-Value-Chain-Data-from-CommCare": {
          "enabled": true,
          "id": "f2d361b6-e8cd-46f3-8d01-e93c2d21700e",
          "target_job_id": "c8ac3cdd-b085-4253-8d62-4d00131f51cf",
          "source_trigger_id": "983a9aeb-b5a4-4d52-8c7e-b01d8bff0f3d",
          "condition_type": "always"
        },
        "Fetch-Fisheries-Value-Chain-Data-from-CommCare->Upload-Fisheries-Data-to-Azure-Storage": {
          "enabled": true,
          "id": "876e48f2-645e-4982-8cac-f7690ea943ff",
          "target_job_id": "04482b39-609e-433f-8b2b-e3c557b44a37",
          "source_job_id": "c8ac3cdd-b085-4253-8d62-4d00131f51cf",
          "condition_type": "on_job_success"
        }
      },
      "concurrency": null,
      "inserted_at": "2025-07-03T10:51:55Z",
      "updated_at": "2025-09-22T19:20:04Z",
      "jobs": {
        "Fetch-Fisheries-Value-Chain-Data-from-CommCare": {
          "id": "c8ac3cdd-b085-4253-8d62-4d00131f51cf",
          "name": "Fetch Fisheries Value Chain Data from CommCare",
          "body": "fn(state => {\n    console.log(\"Credentials configuration:\", {\n      username: state.configuration.username,\n      apiKeyExists: !!state.configuration.apiKey,\n      hostUrl: state.configuration.hostUrl\n    });\n    return state;\n  });\n  \n  \n  // Proper chaining using .then(). \n  //We are selecting 5 submissions at a time to avoid memory choke\n  get('/form/', {\n    xmlns: 'http://openrosa.org/formdesigner/69FB7362-64E5-423F-BD94-36FDD94E485C',\n    limit: 100,\n    received_on_start: '2024-01-01',\n    received_on_end: '2025-12-31'\n  })\n  .then(state => {\n    console.log(\"Response status:\", state.response.statusCode);\n    console.log(\"Response body:\", state.data);\n    return state;\n  });\n  \n    // Process the fetched data   \n",
          "adaptor": "@openfn/language-commcare@latest",
          "project_credential_id": "b6ddedf7-6dd4-4a04-9481-db33f3ae5ea9"
        },
        "Upload-Fisheries-Data-to-Azure-Storage": {
          "id": "04482b39-609e-433f-8b2b-e3c557b44a37",
          "name": "Upload Fisheries Data to Azure Storage",
          "body": "\nfn(state => {\n  const submissions = state.data || [];\n  console.log(`Processing ${submissions.length} submissions for SQL Server`);\n\n  // Transform data for SQL insertion\n  state.sqlRecords = submissions.map(submission => {\n    const formData = submission.form || {};\n    const saInfo = formData.question1 || {};\n    const caseData = formData.case || {};\n    \n    console.log(`Processing submission for BMU: ${saInfo.bmu || 'Unknown'}`);\n    \n    return {\n      app_build_version: submission.app_build_version,\n      app_id: submission.app_id,\n      app_version: submission.app_version,\n      bmu_linked: saInfo.bmu,\n      build_id: submission.build_id,\n      case_id: caseData[\"@case_id\"],\n      cbo_linked: saInfo.cbo,\n      commcare_version: submission.commcare_version,\n      contact_name: saInfo.display_group_other_information?.contact_name,\n      cu_name: saInfo.cu_name,\n      device_id: submission.device_id,\n      domain: submission.domain,\n      fishery_group_type: caseData.update.fishery_group_type,\n      fishery_grp_name: caseData.update.fishery_grp_name,\n      formatted_start_date: submission.formatted_start_date,\n      geo_point: saInfo.geo_point,\n      groupno: saInfo.groupno,\n      grpcounty: saInfo.grpcounty,\n      grpsrttvillages: saInfo.grpsrttvillages,\n      grpsubcounty: saInfo.grpsubcounty,\n      grpwards: saInfo.grpwards,\n      phoneno: saInfo.phoneno,\n      received_on: submission.received_on,\n      server_modified_on: submission.server_modified_on,\n      start_date: submission.start_date,\n      submit_ip: submission.submit_ip,\n      time_end: formData.meta.time_end,\n      time_start: formData.meta.time_start,\n      username: formData.meta.username,\n      \n      // Add calculated fields if needed\n      submission_year: new Date(submission.received_on).getFullYear(),\n      data_source: 'CommCare'\n    };\n  }).filter(record => record !== null);\n\n  console.log(`Prepared ${state.sqlRecords.length} records for SQL insertion`);\n  return state;\n});\n\n// Insert data into SQL Server\neach('sqlRecords[*]',\n  upsert(\n    'FisheriesMapping',\n    'case_id',\n    state => ({\n      app_build_version: state.data.app_build_version,\n      app_id: state.data.app_id,\n      app_version: state.data.app_version,\n      bmu_linked: state.data.bmu_linked,\n      build_id: state.data.build_id,\n      case_id: state.data.case_id,\n      cbo_linked: state.data.cbo_linked,\n      commcare_version: state.data.commcare_version,\n      contact_name: state.data.contact_name,\n      cu_name: state.data.cu_name,\n      device_id: state.data.device_id,\n      domain: state.data.domain,\n      fishery_group_type: state.data.fishery_group_type,\n      fishery_grp_name: state.data.fishery_grp_name,\n      formatted_start_date: state.data.formatted_start_date,\n      geo_point: state.data.geo_point,\n      groupno: state.data.groupno,\n      grpcounty: state.data.grpcounty,\n      grpsrttvillages: state.data.grpsrttvillages,\n      grpsubcounty: state.data.grpsubcounty,\n      grpwards: state.data.grpsward\n      })\n  ))\n",
          "adaptor": "@openfn/language-mssql@5.1.0",
          "project_credential_id": "8283766a-adaf-4f46-9823-6a1217362f56"
        }
      },
      "triggers": {
        "cron": {
          "enabled": true,
          "id": "983a9aeb-b5a4-4d52-8c7e-b01d8bff0f3d",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "deleted_at": null,
      "lock_version": 16
    }
  },
  "allow_support_access": true,
  "requires_mfa": false
}