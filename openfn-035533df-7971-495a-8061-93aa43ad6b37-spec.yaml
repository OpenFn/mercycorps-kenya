name: mcke
description: null
collections: null
credentials:
  pkioi@mercycorps.org-Commcare:
    name: Commcare
    owner: pkioi@mercycorps.org
  pkioi@mercycorps.org-SQL-AZURE:
    name: SQL-AZURE
    owner: pkioi@mercycorps.org
workflows:
  Add-HH-Member:
    name: Add HH Member
    jobs:
      Add-HH-Member:
        name: Add HH Member
        adaptor: '@openfn/language-mssql@latest'
        credential: null
        body: |
          upsertMany(
            'hh_members',
            'case_id',
            state => {
              //const dataArray = state.data.form.hh_members_registration || [];
              
              const forceArray=(x)=>Array.isArray(x)?x:[x]; //function to force a json object into an array
              const dataArray=forceArray(state.data.form.hh_members_registration);
              
             //if (Array.isArray(dataArray)) {
              const azureHHmembers = dataArray.map((x, i) => {
              const hhCodes = x.pax_identifier_information.HHID_output.split('HH');
              const hhMemberId = `HH${hhCodes[1]}-${i}`;
                //console.log('The hhMemberId is:', hhMemberId);

                return {
                  //=============================My Loop values:=============
                  number: hhMemberId,

                  Participant_id: x.pax_identifier_information.hhm_id,

                  fname: x.pax_identifier_information.PAX_info.first_name,
                  mname: x.pax_identifier_information.PAX_info.middle_name,
                  lname: x.pax_identifier_information.PAX_info.last_name,
                  nickname: x.pax_identifier_information.PAX_info.nickname,

                  gender: x.pax_identifier_information.PAX_info.sex,
                  dob: x.pax_identifier_information.PAX_info.hhm_dob,
                  mobileno: x.pax_identifier_information.PAX_info.hhm_phone_number,

                  id_huduma: x.pax_identifier_information.PAX_info.id_number,
                  relationship: x.pax_identifier_information.PAX_info.hhm_relationship,
                  disability: x.pax_identifier_information.PAX_info.disability,
                  participant_grp: x.pax_identifier_information.persons_info.pax_group,

                  female_status: x.pax_identifier_information.special_groups.this_woman_is,
                  // MUAC_value: x.pax_identifier_information.special_groups.MUAC_status_calc,
                  MUAC_value: x.pax_identifier_information.special_groups.muac_value || 0,

                  // delivery_date: x.pax_identifier_information.PAX_info.middle_name,
                  source_of_livelihood: x.pax_identifier_information.special_groups.livelihood,
                  mom_child_booklet: x.pax_identifier_information.has_motherchildbooklet,
                  community_unit: x.pax_identifier_information.the_cu_name,

                  // TODO: please check where these value are found ------------------
                  //comm_frp_mobile: x.pax_identifier_information.chs_hh.question_list_chusla.chs_contact,
                  comm_frp_mobile:dataValue('form.case.update.chs_contact'),
                  // CHS_hh_number: x.pax_identifier_information.chs_hh.question_list_chusla.CHS_Household_Number,
                  // -----------------------------------------------------------------

                  facility_comm_unit: x.pax_identifier_information.linked_facility_in_cu,

                  // health_insurance: x.pax_identifier_information.chs_hh.question_list_chusla.do_you_have_health_insurance_cover,
                  // health_insurance_details: x.pax_identifier_information.PAX_info.middle_name,

                  // birth_cert: x.pax_identifier_information.PAX_info.middle_name,
                  // birth_cert_no: x.pax_identifier_information.chs_hh.question_list_chusla.birth_certificate_no,

                  // orphan: x.pax_identifier_information.chs_hh.question_list_chusla.orphan,

                  // other_health_insurance: x.pax_identifier_information.PAX_info.middle_name,

                  // schooling: x.pax_identifier_information.chs_hh.question_list_chusla.in_school,

                  // vitamin_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_vitamin_a_given || '',
                  // penta_3_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_penta_3_given || '',
                  // immunized: x.pax_identifier_information.chs_hh.question_list_chusla.is_a_child_fully_immunized_under_1_yr_old || '',
                  // measles_rubella_immunized: x.pax_identifier_information.chs_hh.question_list_chusla.measles_rubella_at_2_years || '',
                  // delivery_place: x.pax_identifier_information.chs_hh.question_list_chusla.state_the_place_of_delivery || '',

                  full_name: x.pax_identifier_information.PAX_info.pax_full_name,
                  age_months: x.pax_identifier_information.PAX_info.hhm_age_months,
                  hhm_age_years: x.pax_identifier_information.PAX_info.hhm_age_years,
                  under_5: x.pax_identifier_information.PAX_info.under_5,
                  MUAC_status_calc: x.pax_identifier_information.special_groups.MUAC_status_calc || '',
                  family_setup: x.pax_identifier_information.family_setup,
                  orphan_second: x.case.update.orphan,
                  fully_immunized_under_one: x.pax_identifier_information.fully_immunized_under_one,

                  functional_latrine: x.pax_identifier_information.functional_latrine,
                  mother_child_booklet: x.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,

                  The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),
                  subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),
                  the_ward: x.pax_identifier_information.the_ward,
                  The_location: x.pax_identifier_information.the_location,
                  the_village: x.pax_identifier_information.the_village,
                  srtt_village: 'SRTT_VILLAGE_ ' + x.pax_identifier_information.the_village,

                  collected_by: x.pax_identifier_information.user_collected_is,
                  date_of_collection: x.pax_identifier_information.date_of_collection,
                  hhid_output: x.case.update.HHID_output,

                  vitamin_a_under1: x.pax_identifier_information['vitamin_a_under1'],

                  case_id: x.case['@case_id'],
                  parent_case_id: dataValue('form.case.@case_id'), //foreign key for households

                  GPS: x.pax_identifier_information.GPS,
                  date_posted: new Date().toISOString(),
                };
              });
              return azureHHmembers;
           
            },

            { setNull: false, writeSql: true, logValues: false }
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Add-HH-Member:
        source_trigger: webhook
        target_job: Add-HH-Member
        condition_type: js_expression
        condition_label: Register HH
        condition_expression: |
          state.data.form.#type == "data" && state.data.form["@name"] == "Register HH and Classify Participants"
        enabled: true
  BOY-Register:
    name: BOY Register
    jobs:
      BOY-Register:
        name: BOY Register
        adaptor: '@openfn/language-mssql@5.0.9'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          //case management
          upsert("case_management", ["case_id", "reporting_period"],
              state => ({
                  case_id: dataValue("form.case['@case_id']"),
                  pax_group: dataValue('form.boy_demographics_information.pax_group') || "",
                  group_name: dataValue('form.boy_group_details.group_name_new') || "",
                  group_no: dataValue('form.boy_group_details.groupno') || "",
                  reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),
                  user_id: dataValue("form.case['@user_id']"),
                  date_created: dataValue("form.case['@date_modified']"),
                  date_modified: dataValue("form.case['@date_modified']"),
                  linked_facility: dataValue('form.case.update.linked_facility'),
                  the_county: dataValue('form.case.update.the_county'),
                  the_cu_name: dataValue('form.case.update.the_cu_name'),
                  the_location: dataValue('form.boy_group_details.the_location'),
                  the_subcounty: dataValue('form.case.update.the_subcounty'),
                  the_village: dataValue('form.case.update.the_village'),
                  the_ward: dataValue('form.case.update.the_ward'),
                  facilitated_by: dataValue('form.facilitated_by.facilitator'),
                  username: dataValue('form.meta.username'),
                  app_build_version: dataValue('form.meta.app_build_version'),
                  submit_ip: dataValue('submit_ip'),
                  
                  originator: 'v2',//tracking the origin of the forwarder

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //2.boy_anthropometric_information
          upsert("boy_anthropometric_information", ["case_id", "reporting_period"],
              state => ({
                  date_created: dataValue("form.case['@date_modified']"),
                  case_id: dataValue("form.case['@case_id']"),
                  reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),
                  bmi_calc: dataValue('form.boy_anthropometric_information.bmi_status_calc'),
                  bmi_value: Number(dataValue('form.boy_anthropometric_information.bmi_boyvalue')) || 0,
                  //bmi_value: dataValue('form.boy_anthropometric_information.bmi_boyvalue') || 0,
                  //heightcm: dataValue('form.boy_anthropometric_information.boy_heightcm') || '0',
                  heightcm: dataValue('form.boy_anthropometric_information.boy_heightcm') || 0,
                  weightkg: dataValue('form.boy_anthropometric_information.boy_weightkg') || 0,
                  muacvalue: dataValue('form.boy_anthropometric_information.boy_muacvalue') || 0,
                  muac_membr: dataValue('form.boy_anthropometric_information.muac_membr') || '',
                  originator: 'v2',

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //3.boy_demographics_information
          upsert("boy_demographics_information", ["case_id", "reporting_period"],
              state => ({
                  date_created: dataValue("form.case['@date_modified']"),
                  case_id: dataValue("form.case['@case_id']"),
                  reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),

                  HHID_hh: dataValue('form.boy_demographics_information.HHID_hh'),
                  HHID_output: dataValue('form.boy_demographics_information.HHID_output'),
                  //age: dataValue('form.boy_demographics_information.age') || 0,
                  //age: isNaN(dataValue('form.boy_demographics_information.age')) ? null : Number(dataValue('form.boy_demographics_information.age')),
                  socialstatus: dataValue('form.boy_demographics_information.boy_socialstatus'),
                  participant_name: dataValue('form.boy_demographics_information.participant_name'),
                  pax_group: dataValue('form.boy_demographics_information.pax_group'),
                  sex: dataValue('form.boy_demographics_information.sex'),
                  lactating: dataValue('form.boy_demographics_information.boy_lactating'),
                  pregnant: dataValue('form.boy_demographics_information.boy_pregnant'),
                  group_name: dataValue('form.boy_group_details.group_name_new'),
                  hvchildren0to5m: dataValue("form.boy_demographics_information['hvchildren0to5m']"),
                  hvchildren10to14yrs: dataValue("form.boy_demographics_information['hvchildren10to14yrs']"),
                  hvchildren15to19yrs: dataValue("form.boy_demographics_information['hvchildren15to19yrs']"),
                  hvchildren24to59m: dataValue("form.boy_demographics_information['hvchildren24to59m']"),
                  hvchildren5to9yrs: dataValue("form.boy_demographics_information['hvchildren5to9yrs']"),
                  hvchildren6to23m: dataValue("form.boy_demographics_information['hvchildren6to23m']"),


                  no_male0to5m: dataValue('form.boy_demographics_information.no_male0to5m') || 0,
                  no_female0to5m: dataValue('form.boy_demographics_information.no_female0to5m') || 0,
                  no_male6to23m: dataValue('form.boy_demographics_information.no_male6to23m') || 0,
                  no_female6to23m: dataValue('form.boy_demographics_information.no_female6to23m') || 0,
                  no_male_24_59m: dataValue('form.boy_demographics_information.how_many_male_24_59m') || 0,
                  no_female_24_59m: dataValue('form.boy_demographics_information.how_many_female_24_59m') || 0,
                  no_male5to9yrs: dataValue('form.boy_demographics_information.no_male5to9yrs') || 0,
                  no_female5to9yrs: dataValue('form.boy_demographics_information.no_female5to9yrs') || 0,
                  no_male10to14yrs: dataValue('form.boy_demographics_information.no_male10to14yrs') || 0,
                  no_female10to14yrs: dataValue('form.boy_demographics_information.no_female10to14yrs') || 0,
                  no_male15to19yrs: dataValue('form.boy_demographics_information.no_male15to19yrs') || 0,
                  no_female15to19yrs: dataValue('form.boy_demographics_information.no_female15to19yrs') || 0,
                  new_group_type: dataValue('form.boy_demographics_information.new_group_type'),
                  originator: 'v2',

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //4.boy_monthly_interventions
          upsert("boy_monthly_interventions", ["case_id", "reporting_period"],
              state => ({
                  date_created: dataValue("form.case['@date_modified']"),
                  case_id: dataValue("form.case['@case_id']"),
                  reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),
                  grp_weekly_sessionscode: dataValue('form.boy_monthly_interventions.grp_weekly_sessionscode'),
                  transition_pathway: dataValue('form.boy_monthly_interventions.transition_pathway'),

                  interv_healthnutrition: dataValue('form.boy_monthly_interventions.interv_healthnutrition'),
                  interv_referral: dataValue('form.boy_monthly_interventions.interv_referral'),
                  interv_referrals: dataValue('form.boy_monthly_interventions.interv_referrals'),
                  interv_socialservices: dataValue('form.boy_monthly_interventions.interv_socialservices'),
                  resillient_livelihoods: dataValue('form.boy_monthly_interventions.resillient_livelihoods'),


                  week1datetime: dataValue("form.boy_monthly_interventions['week1datetime']"),
                  week2datetime: dataValue("form.boy_monthly_interventions['week2datetime']"),
                  week3datetime: dataValue("form.boy_monthly_interventions['week3datetime']"),
                  week4datetime: dataValue("form.boy_monthly_interventions['week4datetime']"),
                  weekly_session_attended: dataValue('form.boy_monthly_interventions.weekly_session_attended'),

                  moh_100_serial_number: dataValue('form.boy_monthly_interventions.moh_100community_refferal_form_serial_number') || '',
                  moh_409_serial_number: dataValue('form.boy_monthly_interventions.moh_409_code_in_the_register') || '',


                  originator: 'v2',

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //5.boy_sessions_information
          upsert("boy_sessions_information", ["case_id", "reporting_period"],
              state => ({
                  date_created: dataValue("form.case['@date_modified']"),
                  case_id: dataValue("form.case['@case_id']"),
                  reporting_period: dataValue('form.monthly_boy_reporting_information.report_period'),
                  demonstration: dataValue('form.boy_sessions_information.demonstration'),
                  products_distributed: dataValue('form.boy_sessions_information.products_distributed'),
                  sources_of_serviceproduct:dataValue('form.boy_sessions_information.sources_of_serviceproduct_or_messageeducation.sources_of_serviceproduct_or_messageeducation_this_monthconfirm_from_source'),
                  originator: 'v2',

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->BOY-Register:
        source_trigger: webhook
        target_job: BOY-Register
        condition_type: always
        enabled: true
  Child-Register-Follow-Up:
    name: Child Register Follow-Up
    jobs:
      Child-Register-Follow-Up:
        name: Child Register Follow-Up
        adaptor: '@openfn/language-mssql@latest'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          //1.  Case Management
          fn(state => {
            try {
              return upsert(
                "case_management",
                ['case_id', 'reporting_period'],
                state => {
                  const caseId = dataValue("form.case['@case_id']")(state);
                  const reportingPeriod = dataValue('form.child_reporting_period.report_period')(state);

                  if (!caseId || !reportingPeriod) {
                    throw new Error('Missing required field: case_id or reporting_period');
                  }

                  return {
                    case_id: caseId,
                    reporting_period: reportingPeriod,
                    pax_group: dataValue('form.child_linked_group_details.pax_group') || "",
                    group_name: dataValue('form.child_linked_group_details.group_name_new') || "",
                    group_no: dataValue('form.child_linked_group_details.groupno') || "",
                    user_id: dataValue("form.case['@user_id']"),
                    date_created: dataValue("form.case['@date_modified']"),
                    date_modified: dataValue("form.case['@date_modified']"),
                    linked_facility: dataValue('form.child_linked_group_details.linked_facility'),
                    the_county: dataValue('form.child_linked_group_details.the_county'),
                    the_cu_name: dataValue('form.child_linked_group_details.the_cu_name'),
                    the_location: dataValue('form.child_linked_group_details.the_location'),
                    the_subcounty: dataValue('form.child_linked_group_details.the_subcounty'),
                    the_village: dataValue('form.child_linked_group_details.the_village'),
                    the_ward: dataValue('form.child_linked_group_details.the_ward'),
                    //added on v2
                    facilitated_by: dataValue('form.child_facilitated_by.facilitator'),
                    username: dataValue('form.meta.username'),
                    app_build_version: dataValue('form.meta.app_build_version'),
                    submit_ip: dataValue('submit_ip'),
                    originator: 'v2',
                  };
                },
                {
                  setNull: ["'undefined'", "''", "null"],
                  logValues: true,
                }
              )(state);
            } catch (error) {
              console.error('====Error in upsert operation:====', error);
              throw error;
            }
          });

          //2.child_anthropometric_information
          upsert("child_anthropometric_information", ["case_id", "reporting_period"],
              state => {
                        let bmi=0;
                        let height=0;
                        let weight=0;
                      height= dataValue('form.child_anthropometric_information.child_heightcm')(state) || 0;
                      weight= dataValue('form.child_anthropometric_information.child_weightkg')(state) || 0;
                        //calculate BMI once again.
                        /**
                         * bmi=weight(kg)/(height*height)m
                         */
                        if(height!=0){
                          bmi=weight/((height/100)*(height/100));
                          bmi=bmi.toFixed(2);
                        }
                        console.log(bmi);
                        //classify bmi base on numbers===under 5

                  return {
                      date_created: dataValue("form.case['@date_modified']")(state),
                      case_id: dataValue("form.case['@case_id']")(state),
                      reporting_period: dataValue('form.child_reporting_period.report_period')(state),
                      bmi_status_calc: dataValue('form.child_anthropometric_information.bmi_status_calc')(state),
                      bmi_child_value: bmi,
                      child_heightcm: dataValue('form.child_anthropometric_information.child_heightcm')(state) || 0,
                      child_weightkg: dataValue('form.child_anthropometric_information.child_weightkg')(state) || 0,
                      child_muacvalue: dataValue('form.child_anthropometric_information.child_muacvalue')(state) || 0,
                      MUAC_status_calc: dataValue('form.child_anthropometric_information.MUAC_status_calc')(state) || 'NOT DONE',
                      child_linked_group:dataValue('form.child_demographics_information.child_linked_group')(state),
                      originator: 'v2',
                  };
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Child-Register-Follow-Up:
        source_trigger: webhook
        target_job: Child-Register-Follow-Up
        condition_type: always
        enabled: true
  CommCare-to-Azure-SQL:
    name: CommCare-to-Azure-SQL
    jobs:
      Fetch-CommCare-Forms:
        name: Fetch CommCare Forms
        adaptor: '@openfn/language-commcare@latest'
        credential: pkioi@mercycorps.org-Commcare
        body: |
          /*fn(state => {
            console.log("Credentials configuration:", {
              username: state.configuration.username,
              apiKeyExists: !!state.configuration.apiKey,
              hostUrl: state.configuration.hostUrl
            });
            return state;
          });
          */
          // At the beginning of your job
          cursor(state => {
            // Default to a date in the past if no cursor exists yet
            return state.cursor || '2025-01-01';
          },
            { format: d => dateFns.format(new Date(d), 'yyyy-MM-dd') });

          fn(state=>{
            console.log(state.cursor);
            return state;
          });

          // Proper chaining using .then(). 
          //We are selecting 5 submissions at a time to avoid memory choke
          get('/form/', {
            xmlns: 'http://openrosa.org/formdesigner/D24D9B0E-E111-48B0-A631-5D15B7F88374',
            limit: 1000,
            received_on_start: state => state.cursor,
            received_on_end: '2025-12-31'
          })
            .then(state => {
              console.log("Response status:", state.response.statusCode);
              console.log("Response body:", state.data);
              return state;
            });

      Transform-Data:
        name: Transform Data
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          // Add operations here
      Load-to-Azure-SQL:
        name: Load to Azure SQL
        adaptor: '@openfn/language-mssql@latest'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          fn(state => {
            const submissions = state.data || [];
            console.log(`Processing ${submissions.length} submissions for SQL Server`);

            // Transform data for SQL insertion
            // This maps CommCare form fields to your SQL table columns
            state.sqlRecords = submissions.map(submission => {
              
              const formData = submission.form || {};
              const saInfo = formData.sa_info || {};

              const caseData = formData.case || {}
              const createData = caseData.create || {}
          //console.log(`This is inside - ${saInfo.name_of_sa || ''}`);

              //console.log(submission)
              try {
                //console.log(`Processing submission with case ID: ${caseData["@case_id"] || 'unknown'}`);
                // Parse GPS data
                let latitude = '';
                let longitude = '';
                let altitude = '';
                let accuracy = '';
                
                if (saInfo.gps) {
                  // GPS format from CommCare is typically: "latitude longitude altitude accuracy"
                  const gpsValues = saInfo.gps.split(' ');
                  if (gpsValues.length >= 4) {
                    latitude = gpsValues[0];
                    longitude = gpsValues[1];
                    altitude = gpsValues[2];
                    accuracy = gpsValues[3];
                  }
                }

                // Format date values properly
                let dataEntryDate = null;
                if (saInfo.data_entry_date) {
                  // Try to create a valid date object - if it fails, leave as null
                  try {
                    // Parse the date - adjust this based on your actual date format
                    const parsedDate = new Date(saInfo.data_entry_date);
                    if (!isNaN(parsedDate.getTime())) {
                      // Format as ISO string which SQL Server can handle
                      dataEntryDate = parsedDate.toISOString();
                    }
                  } catch (e) {
                    console.log(`Error parsing date ${saInfo.data_entry_date}: ${e.message}`);
                  }
                }


                // Format created date
                let createdDate = null;
                if (submission.received_on) {
                  try {
                    const parsedDate = new Date(submission.received_on);
                    if (!isNaN(parsedDate.getTime())) {
                      createdDate = parsedDate.toISOString();
                    }
                  } catch (e) {
                    console.log(`Error parsing received_on date: ${e.message}`);
                  }
                }
                
                // Check for subcases - look through subcase0 to subcase17
                let childCaseID = 'childCaseID';
                let childCaseName = 'childCaseName';
                let childCaseType = 'childCaseType';
                
                for (let i = 0; i <= 17; i++) {
                  const subcaseKey = `subcase_${i}`;
                 // console.log(`This is my subcase -${subcaseKey}`);
                  //console.log(`This is my subcase Data -${formData.subcaseKey}`);

                  if (formData[subcaseKey] && formData[subcaseKey].case["@case_id"]) {
                    childCaseID = formData[subcaseKey].case["@case_id"];
                    
                    // Check if there's a create section with case_name
                    if (formData[subcaseKey].case.create && formData[subcaseKey].case.create.case_name) {
                      childCaseName = formData[subcaseKey].case.create.case_name;
                    }
                    
                    // Check if there's a create section with case_type
                    if (formData[subcaseKey].case.create && formData[subcaseKey].case.create.case_type) {
                      childCaseType = formData[subcaseKey].case.create.case_type;
                    }
                    
                    // Found a valid subcase, no need to check more
                    break;
                  }
                }
                
                return {
                  CaseId: formData.case["@case_id"],
                  ActorName: saInfo.name_of_sa || '',
                  ActorCategory: formData.sa_info.category_of_system_actor,
                  CaseName: formData.case.create.case_name,
                  CaseType: formData.case.create.case_type,
                  FirstName: formData.sa_info.owners_first_name,
                  LastName: formData.sa_info.owners_last_name,
                  FullName: formData.sa_info.Contact_full_name_owner,
                  PhoneNo: formData.sa_info.phone_number,
                  County: formData.sa_info.county,
                  SubCounty: saInfo["sub-county"],
                  Ward: formData.sa_info.ward,
                  Location: formData.sa_info.location,
                  Village: formData.sa_info.village,

                  PurposeArea: formData.sa_info.purpose_areas,
                  DataEntryDate: dataEntryDate,
                  GPSConsent: formData.sa_info.gps_consent,
                  ConsentAgreed: formData.consent_agreed,
                  DataCollector: formData.sa_info.name_of_data_collector,
                  Latitude: latitude,
                  Longitude: longitude,
                  Altitude: altitude,
                  Accuracy: accuracy,
                  CreatedDate: createdDate,
                  ChildCaseID: childCaseID,
                  ChildCaseName: childCaseName,
                  ChildCaseType: childCaseType,
                  Username: formData.meta.username,

                  // Add calculated fields if needed
                  submission_year: new Date(submission.received_on).getFullYear(),
                  data_source: 'CommCare'
                };
              } catch (error) {
                console.log(`Error processing submission: ${error.message}`);
                // Return a minimal record or skip this record
                return null;
              }
            }).filter(record => record !== null);

            console.log(`Prepared ${state.sqlRecords.length} records for SQL insertion`);
            return state;
          });




          // After your data processing, 
          //update the cursor to the most recent date
          fn(state => {
            if (state.data && state.data.length > 0) {
              // Find the most recent received_on date from all the processed submissions
              console.log("Cursor update starts here");

              const dates = state.data
                .map(submission => submission.received_on)
                .filter(date => date) // Remove any undefined dates
                .map(dateStr => new Date(dateStr));
              
              if (dates.length > 0) {
                const mostRecentDate = new Date(Math.max(...dates));
                // Update the cursor to the most recent date for next run
                state.cursor = mostRecentDate.toISOString();
                console.log(`Setting cursor to ${state.cursor} for next run`);

                // At the end of your job, ensure the cursor is saved
                cursor(state => state.cursor);
              }
            }

            return state;
          });




          // Step 3: Insert data into SQL Server
          each('sqlRecords[*]',
            upsert('SystemActors',['CaseID'],
              state => ({
                CaseId: state.data.CaseId,
                ActorName: state.data.ActorName,
                ActorCategory: state.data.ActorCategory,
                CaseName: state.data.CaseName,
                CaseType: state.data.CaseType,
                FirstName: state.data.FirstName,
                LastName: state.data.LastName,
                FullName: state.data.FullName,
                PhoneNo: state.data.PhoneNo,
                County: state.data.County,
                SubCounty: state.data.SubCounty,
                Ward: state.data.Ward,
                Location: state.data.Location,
                Village: state.data.Village,
                PurposeArea: state.data.PurposeArea,
                DataEntryDate: state.data.DataEntryDate,
                GPSConsent: state.data.GPSConsent,
                ConsentAgreed: state.data.ConsentAgreed,
                DataCollector: state.data.DataCollector,
                Latitude: state.data.Latitude,
                Longitude: state.data.Longitude,
                Altitude: state.data.Altitude,
                Accuracy: state.data.Accuracy,
                CreatedDate: state.data.CreatedDate,
                ChildCaseID: state.data.ChildCaseID,
                ChildCaseName: state.data.ChildCaseName,
                ChildCaseType: state.data.ChildCaseType,
                data_source:state.data.data_source,
                Username: state.data.Username,
              })
            )
          );

    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: true
    edges:
      cron->Fetch-CommCare-Forms:
        source_trigger: cron
        target_job: Fetch-CommCare-Forms
        condition_type: always
        enabled: true
      Fetch-CommCare-Forms->Transform-Data:
        source_job: Fetch-CommCare-Forms
        target_job: Transform-Data
        condition_type: on_job_success
        enabled: true
      Transform-Data->Load-to-Azure-SQL:
        source_job: Transform-Data
        target_job: Load-to-Azure-SQL
        condition_type: on_job_success
        enabled: true
  Fetch-Members-From-Commcare:
    name: Fetch Members From Commcare
    jobs:
      Fetch-CommCare-Forms:
        name: Fetch CommCare Forms
        adaptor: '@openfn/language-commcare@latest'
        credential: pkioi@mercycorps.org-Commcare
        body: |
          // Update the persistent cursor
          cursor(state => '2024-11-05');
          // Set up initial cursor to today if not already set
          cursor(state => state.cursor || 'today', 
            { format: d => dateFns.format(new Date(d), 'yyyy-MM-dd') });

          // Get data and process it immediately
          get('/form/', state => {
            const endDate = state.cursor;
            
            // Calculate start date as 7 days before end date
            const endDateObj = new Date(endDate);
            const startDateObj = new Date(endDateObj);
            startDateObj.setDate(endDateObj.getDate() - 1);
            
            // Don't go earlier than Jan 2022
            const earliestDate = new Date('2022-01-01');
            const startDate = dateFns.format(
              startDateObj > earliestDate ? startDateObj : earliestDate, 
              'yyyy-MM-dd'
            );
            
            // Store these dates in state for logging
            state.currentQueryDates = {
              start: startDate,
              end: endDate
            };
            
            return {
              xmlns: 'http://openrosa.org/formdesigner/158EB23A-DCFF-4680-90DA-A52D95628A8C',
              limit: 100, // Adjust limit based on record size
              received_on_end: endDate,
              received_on_start: startDate
            };
          });

          // Process results and update cursor in one step
          fn(state => {
            console.log(`Retrieved ${state.data.length} records from ${state.currentQueryDates.start} to ${state.currentQueryDates.end}`);
            
            // Process your data here
            // ...
            
            // Move the cursor back for the next chunk
            const currentDate = new Date(state.cursor);
            const newCursorDate = new Date(currentDate);
            newCursorDate.setDate(currentDate.getDate() - 1);
            
            // Stop if we've reached Jan 2022
            const earliestDate = new Date('2022-01-01');
            if (newCursorDate < earliestDate) {
              console.log("Reached January 2022 - processing complete");
              state.complete = true;
              state.cursor = dateFns.format(new Date(), 'yyyy-MM-dd'); // Reset to today
            } else {
              state.cursor = dateFns.format(newCursorDate, 'yyyy-MM-dd');
              console.log("Next cursor date:", state.cursor);
            }
            
            return state;
          });

          // Update the persistent cursor
          cursor(state => state.cursor);

      Transform-Data:
        name: Transform Data
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          // Add operations here
      Load-to-Azure-SQL:
        name: Load to Azure SQL
        adaptor: '@openfn/language-mssql@latest'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          
          //1. Reduce redundant code with destructuring:

          fn(state => {
            const submissions = state.data || [];
            console.log(`Processing ${submissions.length} submissions for SQL Server`);

            // Initialize array directly on state
            state.sqlRecords = submissions.flatMap(submission => {
              const { form = {} } = submission;
              const { Household_information = {}, case: formCase = {}, hh_members_registration = [] } = form;
              const membersArray = Array.isArray(hh_members_registration) ? hh_members_registration : [hh_members_registration];
              
              console.log(`This is Household case ID - ${formCase['@case_id']}`);
              
              // Use flatMap to filter out invalid members
              return membersArray
                .filter(member => member?.case?.['@case_id'])
                .map(member => {
                  const { case: memberCase = {}, pax_identifier_information = {} } = member;
                  const { update = {} } = formCase;
                  const { update: memberUpdate = {} } = memberCase;
                  
                  console.log(`Processing member Case ID - ${memberCase['@case_id']}`);
                  
                  return {
                    parentCaseId: formCase["@case_id"],
                    householdID: Household_information.is_this_new_village?.CHS_Household_Number || 999,
                    caseID: memberCase["@case_id"],
                    // Location info
                    County: update.the_county,
                    SubCounty: update.the_subcounty,
                    Ward: update.the_ward,
                    Location: update.the_location,
                    Village: update.the_village,
                    CUName: update.the_cu_name,
                    LivelihoodZone: update.livelihood_zone,
                    Livelihood: update.livelihood,
                    FamilySetup: update.family_type,
                    Disability: update.disability,
                    // Member info
                    AgeInYears: pax_identifier_information.hhm_age_years,
                    AgeInMonths: pax_identifier_information.hhm_age_months,
                    UserName: pax_identifier_information.user_collected_is,
                    Sex: memberUpdate.sex,
                    Middlename: memberUpdate.middlename,
                    LastName: memberUpdate.last_name,
                    FirstName: memberUpdate.first_name,
                    NickName: memberUpdate.nickname,
                    HhmID: pax_identifier_information.hhm_id,
                    HHID_output: memberUpdate.HHID_output,
                    IDNumber: memberUpdate.id_number,
                    MobileNo: memberUpdate.hhm_phone_number,
                    ColletionDate: memberUpdate.date_of_collectiontoday,
                    BirthDate: memberUpdate.hhm_dob,
                    FemaleStatus: memberUpdate.this_woman_is,
                    RelationShip: memberUpdate.hhm_relationship,
                    DatePosted: new Date().toISOString().split('T')[0],
                    submission_year: new Date(submission.received_on).getFullYear(),
                    data_source: 'CommCare'
                  };
                });
            });

            console.log(`Prepared ${state.sqlRecords.length} records for SQL insertion`);
            return state;
          });


           // Insert data into SQL Server
            each('sqlRecords[*]',
              upsert('hh_members_test', 'case_id',
                state => ({
                  parent_case_id: state.data.parentCaseId,
                  case_id: state.data.caseID,
                  household_id: state.data.householdID,
                  //names
                    
                  gender:state.data.Sex,
                  fname:state.data.FirstName,
                  mname:state.data.Middlename,
                  lname:state.data.LastName,
                  nickname:state.data.NickName,
            
                  hhid_output:state.data.HHID_output,
                  participant_id:state.data.HhmID,
            
                  dob:state.data.BirthDate,
                  id_huduma:state.data.IDNumber,
                  mobileno:state.data.MobileNo,
                  relationship:state.data.RelationShip,
                  female_status:state.data.FemaleStatus,
            
                  the_county:state.data.County,
                  subcounty:state.data.SubCounty,
                  the_ward:state.data.Ward,
                  the_location:state.data.Location,
                  the_village:state.data.Village,
            
                  community_unit:state.data.CUName,
                  //the_village:state.data.LivelihoodZone,
                  //the_village:state.data.Livelihood,
                  family_setup:state.data.FamilySetup,
                  disability:state.data.Disability,
                  hhm_age_years:state.data.AgeInYears,
                  curr_age_months:state.data.AgeInMonths,
                  collected_by:state.data.UserName,
                  date_of_collection:state.data.ColletionDate,
                  date_posted:state.data.DatePosted,
                  originator:'v2',
            
            
            
            
            
                })
              )
            );
    triggers:
      cron:
        type: cron
        cron_expression: '00 * * * *'
        enabled: false
    edges:
      cron->Fetch-CommCare-Forms:
        source_trigger: cron
        target_job: Fetch-CommCare-Forms
        condition_type: always
        enabled: true
      Fetch-CommCare-Forms->Transform-Data:
        source_job: Fetch-CommCare-Forms
        target_job: Transform-Data
        condition_type: on_job_success
        enabled: true
      Transform-Data->Load-to-Azure-SQL:
        source_job: Transform-Data
        target_job: Load-to-Azure-SQL
        condition_type: on_job_success
        enabled: true
  Fisheries-Register:
    name: Fisheries Register
    jobs:
      Fetch-Fisheries-Value-Chain-Data-from-CommCare:
        name: Fetch Fisheries Value Chain Data from CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: pkioi@mercycorps.org-Commcare
        body: |
          fn(state => {
              console.log("Credentials configuration:", {
                username: state.configuration.username,
                apiKeyExists: !!state.configuration.apiKey,
                hostUrl: state.configuration.hostUrl
              });
              return state;
            });
            
            
            // Proper chaining using .then(). 
            //We are selecting 5 submissions at a time to avoid memory choke
            get('/form/', {
              xmlns: 'http://openrosa.org/formdesigner/69FB7362-64E5-423F-BD94-36FDD94E485C',
              limit: 100,
              received_on_start: '2024-01-01',
              received_on_end: '2025-12-31'
            })
            .then(state => {
              console.log("Response status:", state.response.statusCode);
              console.log("Response body:", state.data);
              return state;
            });
            
              // Process the fetched data   
      Upload-Fisheries-Data-to-Azure-Storage:
        name: Upload Fisheries Data to Azure Storage
        adaptor: '@openfn/language-mssql@5.1.0'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          
          fn(state => {
            const submissions = state.data || [];
            console.log(`Processing ${submissions.length} submissions for SQL Server`);

            // Transform data for SQL insertion
            state.sqlRecords = submissions.map(submission => {
              const formData = submission.form || {};
              const saInfo = formData.question1 || {};
              const caseData = formData.case || {};
              
              console.log(`Processing submission for BMU: ${saInfo.bmu || 'Unknown'}`);
              
              return {
                app_build_version: submission.app_build_version,
                app_id: submission.app_id,
                app_version: submission.app_version,
                bmu_linked: saInfo.bmu,
                build_id: submission.build_id,
                case_id: caseData["@case_id"],
                cbo_linked: saInfo.cbo,
                commcare_version: submission.commcare_version,
                contact_name: saInfo.display_group_other_information?.contact_name,
                cu_name: saInfo.cu_name,
                device_id: submission.device_id,
                domain: submission.domain,
                fishery_group_type: caseData.update.fishery_group_type,
                fishery_grp_name: caseData.update.fishery_grp_name,
                formatted_start_date: submission.formatted_start_date,
                geo_point: saInfo.geo_point,
                groupno: saInfo.groupno,
                grpcounty: saInfo.grpcounty,
                grpsrttvillages: saInfo.grpsrttvillages,
                grpsubcounty: saInfo.grpsubcounty,
                grpwards: saInfo.grpwards,
                phoneno: saInfo.phoneno,
                received_on: submission.received_on,
                server_modified_on: submission.server_modified_on,
                start_date: submission.start_date,
                submit_ip: submission.submit_ip,
                time_end: formData.meta.time_end,
                time_start: formData.meta.time_start,
                username: formData.meta.username,
                
                // Add calculated fields if needed
                submission_year: new Date(submission.received_on).getFullYear(),
                data_source: 'CommCare'
              };
            }).filter(record => record !== null);

            console.log(`Prepared ${state.sqlRecords.length} records for SQL insertion`);
            return state;
          });

          // Insert data into SQL Server
          each('sqlRecords[*]',
            upsert(
              'FisheriesMapping',
              'case_id',
              state => ({
                app_build_version: state.data.app_build_version,
                app_id: state.data.app_id,
                app_version: state.data.app_version,
                bmu_linked: state.data.bmu_linked,
                build_id: state.data.build_id,
                case_id: state.data.case_id,
                cbo_linked: state.data.cbo_linked,
                commcare_version: state.data.commcare_version,
                contact_name: state.data.contact_name,
                cu_name: state.data.cu_name,
                device_id: state.data.device_id,
                domain: state.data.domain,
                fishery_group_type: state.data.fishery_group_type,
                fishery_grp_name: state.data.fishery_grp_name,
                formatted_start_date: state.data.formatted_start_date,
                geo_point: state.data.geo_point,
                groupno: state.data.groupno,
                grpcounty: state.data.grpcounty,
                grpsrttvillages: state.data.grpsrttvillages,
                grpsubcounty: state.data.grpsubcounty,
                grpwards: state.data.grpsward
                })
            ))
    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: true
    edges:
      cron->Fetch-Fisheries-Value-Chain-Data-from-CommCare:
        source_trigger: cron
        target_job: Fetch-Fisheries-Value-Chain-Data-from-CommCare
        condition_type: always
        enabled: true
      Fetch-Fisheries-Value-Chain-Data-from-CommCare->Upload-Fisheries-Data-to-Azure-Storage:
        source_job: Fetch-Fisheries-Value-Chain-Data-from-CommCare
        target_job: Upload-Fisheries-Data-to-Azure-Storage
        condition_type: on_job_success
        enabled: true
  GIRL-H-Register:
    name: GIRL-H Register
    jobs:
      GIRL-H-Register:
        name: GIRL-H Register
        adaptor: '@openfn/language-mssql@latest'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          //1. case management
          upsert("case_management", ["case_id", "reporting_period"],
              state => ({
                  case_id: dataValue("form.case['@case_id']"),
                  pax_group: dataValue('form.girl_h_demographics_information.pax_group') || "",
                  group_name: dataValue('form.girlh_groupdetails.group_name_new') || "",
                  group_no: dataValue('form.girlh_groupdetails.groupno') || "",
                  reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period'),
                  user_id: dataValue("form.case['@user_id']"),
                  date_created: dataValue("form.case['@date_modified']"),
                  date_modified: dataValue("form.case['@date_modified']"),
                  linked_facility: dataValue('form.girlh_groupdetails.linked_facility'),
                  the_county: dataValue('form.girlh_groupdetails.the_county'),
                  the_cu_name: dataValue('form.girlh_groupdetails.the_cu_name'),
                  the_location: dataValue('form.girlh_groupdetails.the_location'),
                  the_subcounty: dataValue('form.girlh_groupdetails.the_subcounty'),
                  the_village: dataValue('form.girlh_groupdetails.the_village'),
                  the_ward: dataValue('form.girlh_groupdetails.the_ward'),
                  //added on v2
                  facilitated_by: dataValue('form.facilitated_by.facilitator'),
                  username: dataValue('form.meta.username'),
                  app_build_version: dataValue('form.meta.app_build_version'),
                  submit_ip: dataValue('submit_ip'),

                  originator: 'v2',//tracking the origin of the forwarder

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );

          //2.girl_h_anthropometric_information
          upsert("girl_h_anthropometric_information", ["case_id", "reporting_period"],
              state => {
                  const girlhLactating = dataValue('form.girl_h_anthropometric_information.grilh_lactating')(state);
                  const muacValue = girlhLactating === "no" ? 0 : (dataValue('form.girl_h_anthropometric_information.girlh_muacvalue')(state) || 0);
                  let weight = dataValue('form.girl_h_anthropometric_information.girlh_weightkg')(state)||0;
                  let height = dataValue('form.girl_h_anthropometric_information.girlh_heightcm')(state)||0;  
                  let bmi= 0;

                  if (height=="infinity"){
                      height=0;
                  }
                  
                  if(height!=0 ){
                      height=height/100;
                      bmi = weight / (height * height);
                      bmi=bmi.toFixed(2);
                  }
                  console.log(`This is the BMI value ${bmi}`);

                  return {
                      date_created: dataValue("form.case['@date_modified']")(state),
                      case_id: dataValue("form.case['@case_id']")(state),
                      reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period')(state),
                      bmi_calc: dataValue('form.girl_h_anthropometric_information.bmi_calc')(state),
                      bmi_girlhvalue: bmi,
                      girlh_heightcm: dataValue('form.girl_h_anthropometric_information.girlh_heightcm')(state) || 0,
                      girlh_weightkg: dataValue('form.girl_h_anthropometric_information.girlh_weightkg')(state) || 0,
                      girlh_muacvalue: muacValue || 0,
                      muac_membr: dataValue('form.girl_h_anthropometric_information.muac_membr')(state) || 'NOT DONE',
                      originator: 'v2',
                  };
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );

          //3.girl_h_demographics_information
          upsert("girl_h_demographics_information", ["case_id", "reporting_period"],
              state => {
                  // const girlhLactating = dataValue('form.girl_h_demographics_information.grilh_lactating')(state);
                  //const muacValue = girlhLactating === "no" ? 0 : (dataValue('form.girl_h_demographics_information.girlh_muacvalue')(state) || 0);

                  return {

                      date_created: dataValue("form.case['@date_modified']")(state),
                      case_id: dataValue("form.case['@case_id']")(state),
                      reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period')(state),

                      HHID_hh: dataValue('form.girl_h_demographics_information.HHID_hh')(state),
                      HHID_output: dataValue('form.girl_h_demographics_information.HHID_output')(state),
                      age: dataValue('form.girl_h_demographics_information.age')(state) || 0,
                      girlh_socialstatus: dataValue('form.girl_h_demographics_information.girlh_socialstatus')(state),
                      grilh_lactating: dataValue('form.girl_h_demographics_information.grilh_lactating')(state),
                      grilh_pregnant: dataValue('form.girl_h_demographics_information.grilh_pregnant')(state),
                      group_name: dataValue('form.girlh_groupdetails.group_name_new')(state),
                      hvchildren0to5m: dataValue("form.girl_h_demographics_information['hvchildren0to5m']")(state),
                      hvchildren10to14yrs: dataValue("form.girl_h_demographics_information['hvchildren10to14yrs']")(state),
                      hvchildren15to19yrs: dataValue("form.girl_h_demographics_information['hvchildren15to19yrs']")(state),
                      hvchildren24to59m: dataValue("form.girl_h_demographics_information['hvchildren24to59m']")(state),
                      hvchildren5to9yrs: dataValue("form.girl_h_demographics_information['hvchildren5to9yrs']")(state),
                      hvchildren6to23m: dataValue("form.girl_h_demographics_information['hvchildren6to23m']")(state),
                      new_group_type: dataValue('form.girl_h_demographics_information.new_group_type')(state),
                      no_female5to9yrs: dataValue('form.girl_h_demographics_information.no_female5to9yrs')(state),
                      no_male5to9yrs: dataValue('form.girl_h_demographics_information.no_male5to9yrs')(state),
                      participant_name: dataValue('form.girl_h_demographics_information.participant_name')(state),
                      pax_group: dataValue('form.girl_h_demographics_information.pax_group')(state),
                      sex: dataValue('form.girl_h_demographics_information.sex')(state),
                      originator: 'v2',
                  };
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //4.girl_h_monthly_interventions
          upsert("girl_h_monthly_interventions", ["case_id", "reporting_period"],
              state => {
                  // const girlhLactating = dataValue('form.girl_h_demographics_information.grilh_lactating')(state);
                  //const muacValue = girlhLactating === "no" ? 0 : (dataValue('form.girl_h_demographics_information.girlh_muacvalue')(state) || 0);

                  return {
                      date_created: dataValue("form.case['@date_modified']")(state),
                      case_id: dataValue("form.case['@case_id']")(state),
                      reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period')(state),
                      grp_weekly_sessionscode: dataValue('form.girl_h_monthly_interventions.grp_weekly_sessionscode')(state),
                      interv_healthnutrition: dataValue('form.girl_h_monthly_interventions.interv_healthnutrition')(state),
                      interv_referral: dataValue('form.girl_h_monthly_interventions.interv_referral')(state),
                      interv_referrals: dataValue('form.girl_h_monthly_interventions.interv_referrals')(state),
                      interv_socialservices: dataValue('form.girl_h_monthly_interventions.interv_socialservices')(state),
                      resillient_livelihoods: dataValue('form.girl_h_monthly_interventions.resillient_livelihoods')(state),
                      transition_pathway: dataValue('form.girl_h_monthly_interventions.transition_pathway')(state),
                      week1datetime: dataValue("form.girl_h_monthly_interventions['week1datetime']")(state),
                      week2datetime: dataValue("form.girl_h_monthly_interventions['week2datetime']")(state),
                      week3datetime: dataValue("form.girl_h_monthly_interventions['week3datetime']")(state),
                      week4datetime: dataValue("form.girl_h_monthly_interventions['week4datetime']")(state),
                      weekly_session_attended: dataValue('form.girl_h_monthly_interventions.weekly_session_attended')(state),
                      originator: 'v2',
                  };
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //5.girl_h_sessions_information
          upsert("girl_h_sessions_information", ["case_id", "reporting_period"],
              state => {
                  let ProductServiceSource = dataValue('form.girl_h_sessions_information.sources_of_serviceproduct_or_messageeducation.sources_of_serviceproduct_or_messageeducation_this_monthconfirm_from_source')(state);
                  // Convert sourceValue to an integer
                  //ProductServiceSource = parseInt(ProductServiceSource, 10); // The second argument (10) is for base 10 (decimal)
                  
                  // Check the type of sourceValue
                  console.log("Data type of ProductServiceSource:", typeof ProductServiceSource); // Output: string

                  // If the value is a string and we want to convert it to an integer, do so
                  if (typeof ProductServiceSource === 'string') {
                      ProductServiceSource = parseInt(ProductServiceSource, 10); // Convert to integer
                      //console.log("Converted ProductServiceSource:", ProductServiceSource); // Output: 2
                  } else {
                      //console.log("The value is not a string, it's already a number or other type.");
                  }


                  let sourceValue;

                  if (ProductServiceSource === 1) {
                      sourceValue = "health_facility";
                  } else if (ProductServiceSource === 2) {
                      sourceValue = "anchor_group";
                  } else if (ProductServiceSource === 3) {
                      sourceValue = "outreach";
                  } else if (ProductServiceSource === 4) {
                      sourceValue = "others";
                  } else {
                      sourceValue = "unknown_source";
                  }

                  return {
                      date_created: dataValue("form.case['@date_modified']"),
                      case_id: dataValue("form.case['@case_id']"),
                      reporting_period: dataValue('form.monthly_girl_h_reporting_information.report_period'),
                      demonstration: dataValue('form.girl_h_sessions_information.demonstration'),
                      products_distributed: dataValue('form.girl_h_sessions_information.products_distributed'),
                      sources_of_serviceproduct: sourceValue,
                      originator: 'v2',


                  };
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->GIRL-H-Register:
        source_trigger: webhook
        target_job: GIRL-H-Register
        condition_type: always
        enabled: true
  "Google-Sheets:-Issue/Log":
    name: 'Google Sheets: Issue/Log'
    jobs:
      Google-Sheets-Issue-Log:
        name: Google Sheets Issue-Log
        adaptor: '@openfn/language-googlesheets@latest'
        credential: null
        body: |
          
          appendValues({
            spreadsheetId: '1VbeOf3kR27HqmEhlcMr26lL0S4BH75759nkQkN7KFvg',
            //spreadsheetId:'1V_Uzdw9cCjzLc3y4gXCYhZxZPcp0MZyWaDifaAwGbxA',
            range: 'Raw Data!A2:R2',
            
            values: [
              [ 
                dataValue('metadata.username'),
                dataValue('id'),
                //dataValue('server_modified_on').substr(1,8),
                dataValue('metadata.timeEnd'),
                //new Date(dataValue('metadata.timeEnd')).toString(),
                //dataValue('metadata.timeEnd').substr(1, 8),
                dataValue('form.originator_name'),
                dataValue('form.originator_email'), 
                dataValue("form['issue-opportunity_type']"),
                dataValue("form['question4'].issue_type")||'',
                dataValue("form['question4'].opportunity_type")||'',
                dataValue("form['question4'].risk_type")||'',
                dataValue("form['issue-opportunity_level']"),
                dataValue('form.location_level.county'),
                dataValue('form.location_level.sub_office'),
                dataValue('form.location_level.ward'),
                dataValue('form.location_level.cluster_village_srtt'),
                dataValue('form.location_level.village'),
                dataValue("form['issue-opportunity_description']"),
                dataValue("form['issue-opportunity_programmatic_pertinence']"),
                dataValue("form['issue-opportunity_recommended_action']")
               
              ],
              
            ],
          })

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Google-Sheets-Issue-Log:
        source_trigger: webhook
        target_job: Google-Sheets-Issue-Log
        condition_type: js_expression
        condition_label: null
        condition_expression: |
          state.data.form.#type == "data" && state.data.form["@name"] == "Issues/Opportunity Log - Nawiri"
        enabled: true
  Group-Remapping:
    name: Group Remapping
    jobs:
      Group-Remapping:
        name: Group Remapping
        adaptor: '@openfn/language-mssql@5.0.9'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          
          upsert("anchor_group_members", ['case_id', 'groupno', 'group_type'],
          	state => {
          		let tempdate = dataValue("form['question1'].display_group_other_information.start_date")(state);
          		// Create a Date object
          		const dateObj = new Date(tempdate);
          		let grpStartDate;
          		let jsDate;

          		tempdate = Number(tempdate);
          	// Check if startDate is a number
          	if (typeof tempdate === 'number' && !isNaN(tempdate)) {
          		console.log(`startDate ${tempdate} is a valid number`);
          		// Convert the number to a date
          		const excelEpochOffset = 25569; // Days between 1900 and 1970
          		jsDate = new Date((tempdate - excelEpochOffset) * 86400000); // Convert to JS Date
          		jsDate = jsDate.toISOString().split('T')[0]; //// This gives us 'yyyy-mm-dd'


          		console.log(`The new date is : ${jsDate}`); // Output the corresponding date
          	} else {
          		console.log("startDate is not a valid number");
          	}


          		return {
          			
          			case_id: dataValue("form.case['@case_id']")(state),
          			groupno: dataValue("form.case.update.groupname")(state),
          			group_name: dataValue('form.case.update.group_name_dsc')(state),
          			group_type: dataValue('form.case.update.group_type')(state),
          			date_created: jsDate,
          			hh_id: dataValue('form.other_demographics_info.hhid_output')(state),
          			full_name: dataValue('form.other_demographics_info.pax_fullname')(state),
          			username: dataValue('metadata.username')(state),
          			date_posted: dataValue('metadata.timeEnd')(state),
          			date_modified: new Date(),
          			registercategory: dataValue("form['question1'].display_group_other_information.register_category")(state),
          			participant_group: dataValue("form['question1'].pax_group_allocated")(state),
          			originator: 'v2',
          		};
          	},
          	{
          		setNull: "'undefined'",
          		logValues: true,
          	}
          );
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Group-Remapping:
        source_trigger: webhook
        target_job: Group-Remapping
        condition_type: always
        enabled: true
  Mother-2-Mother-Followup:
    name: Mother-2-Mother Followup
    jobs:
      Mother-2-Mother-Followup:
        name: Mother-2-Mother Followup
        adaptor: '@openfn/language-mssql@latest'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          
          //2.am2mcg_demographics_information
          upsert("case_management", ["case_id", "reporting_period"],
              state => ({
                  case_id: dataValue("form.case['@case_id']"),
                  pax_group: dataValue('form.am2msg_group_details.pax_group') || "",
                  group_name: dataValue('form.am2msg_group_details.group_name_new') || "",
                  group_no: dataValue('form.am2msg_group_details.groupno') || "",
                  reporting_period: dataValue('form.am2mcg_reporting_period.report_period'),
                  user_id: dataValue('form.meta.userID'),
                  date_created: dataValue("form.case['@date_modified']"),
                  date_modified: dataValue("form.case['@date_modified']"),
                  linked_facility: dataValue('form.am2msg_group_details.linked_facility'),
                  the_county: dataValue('form.am2msg_group_details.the_county'),
                  the_cu_name: dataValue('form.am2msg_group_details.the_cu_name'),
                  the_location: dataValue('form.am2msg_group_details.the_location'),
                  the_subcounty: dataValue('form.am2msg_group_details.the_subcounty'),
                  the_village: dataValue('form.am2msg_group_details.the_village'),
                  the_ward: dataValue('form.am2msg_group_details.the_ward'),
                  //added on v2
                  facilitated_by: dataValue('form.facilitated_by.facilitator'),
                  username: dataValue('form.meta.username'),
                  app_build_version: dataValue('form.meta.app_build_version'),
                  submit_ip: dataValue('submit_ip'),

                  originator: 'v2',//tracking the origin of the forwarder

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //2.am2mcg_demographics_information
          upsert("am2mcg_demographics_information", ["case_id", "reporting_period"],
              state => {
                  return {

                      date_created: dataValue("form.case['@date_modified']")(state),
                      case_id: dataValue("form.case['@case_id']")(state),
                      reporting_period: dataValue('form.am2mcg_reporting_period.report_period')(state),
                      HHID_output: dataValue('form.am2mcg_demographics_information.HHID_output')(state),
                      age: dataValue('form.am2mcg_demographics_information.age')(state) || 0,
                      social_status: dataValue('form.am2mcg_demographics_information.social_status')(state),
                      lactating: dataValue('form.am2mcg_demographics_information.lactating')(state),
                      pregnant: dataValue('form.am2mcg_demographics_information.pregnant')(state),
                      //group_name: dataValue('form.am2msg_group_details.group_name_new')(state),
                      
                      hvchildren0to5m: dataValue("form.am2mcg_demographics_information['hvchildren0to5m']")(state),
                      hvchildren10to14yrs: dataValue("form.am2mcg_demographics_information['hvchildren10to14yrs']")(state),
                      hvchildren15to19yrs: dataValue("form.am2mcg_demographics_information['hvchildren15to19yrs']")(state),
                      hvchildren24to59m: dataValue("form.am2mcg_demographics_information['hvchildren24to59m']")(state),
                      hvchildren5to9yrs: dataValue("form.am2mcg_demographics_information['hvchildren5to9yrs']")(state),
                      hvchildren6to23m: dataValue("form.am2mcg_demographics_information['hvchildren6to23m']")(state),
                      //new_group_type: dataValue('form.am2mcg_demographics_information.new_group_type')(state),
                
                      how_many_female_24_59m:dataValue('form.am2mcg_demographics_information.how_many_female_24_59m')(state)||0,
                      how_many_male_24_59m:dataValue('form.am2mcg_demographics_information.how_many_male_24_59m')(state)||0,
                      
                      no_female0to5m:dataValue('form.am2mcg_demographics_information.no_female0to5m')(state)||0,
                      no_female10to14yrs:dataValue('form.am2mcg_demographics_information.no_female10to14yrs')(state)||0,
                      no_female15to19yrs:dataValue('form.am2mcg_demographics_information.no_female15to19yrs')(state)||0,
                      no_female5to9yrs:dataValue('form.am2mcg_demographics_information.no_female5to9yrs')(state)||0,
                      no_female6to23m:dataValue('form.am2mcg_demographics_information.no_female6to23m')(state)||0,
                      
                      no_male0to5m:dataValue('form.am2mcg_demographics_information.no_male0to5m')(state)||0,
                      no_male10to14yrs:dataValue('form.am2mcg_demographics_information.no_male10to14yrs')(state)||0,
                      no_male15to19yrs:dataValue('form.am2mcg_demographics_information.no_male15to19yrs')(state)||0,
                      no_male5to9yrs:dataValue('form.am2mcg_demographics_information.no_male5to9yrs')(state)||0,
                      no_male6to23m:dataValue('form.am2mcg_demographics_information.no_male6to23m')(state)||0,
                      participant_name: dataValue('form.am2mcg_demographics_information.participant_name')(state)||0,
            
                      //pax_group: dataValue('form.am2mcg_demographics_information.pax_group')(state),
                      sex: dataValue('form.am2mcg_demographics_information.sex')(state),
                      tbirth_attendant:dataValue('form.am2mcg_demographics_information.tbirth_attendant')(state),
                      originator: 'v2',
                  };
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );
          //3.am2mcg_interventions
          upsert(
              'am2mcg_interventions',
              ['case_id','reporting_period'],
              {
                  date_created:dataValue('metadata.timeEnd'),
                  case_id:dataValue("form.case['@case_id']"),
                  reporting_period:dataValue("form['am2mcg_reporting_period'].report_period"),
                  health_interv_rcvd:dataValue("form['am2mcg_interventions'].health_interv_rcvd"),
                  other_hn_inter:dataValue("form['am2mcg_interventions'].other_hn_inter"),
                  livelihoods_interv_rcvd:dataValue("form['am2mcg_interventions'].livelihoods_interv_rcvd"),
                  other_resillinet:dataValue("form['am2mcg_interventions'].other_resillinet")||"",
                  social_service_interv:dataValue("form['am2mcg_interventions'].social_service_interv"),
                  other_ss:dataValue("form['am2mcg_interventions'].other_ss"),
                  interv_referrals:dataValue("form['am2mcg_interventions'].interv_referrals"),
                  other_referrals:dataValue("form['am2mcg_interventions'].other_referrals"),
                  completed_referral:dataValue("form['am2mcg_interventions'].completed_referral"),
                  originator: 'v2',
              },
              {
                    setNull: "'undefined'",
                    logValues: true,
                }
              );





          //4.am2mcg_products_distributed
          //==============================================
          upsert(
            'am2mcg_products_distributed',
            ['case_id','reporting_period'],
            state=>{
              let ProductServiceSource = dataValue('form.sources_of_serviceproduct_or_messageeducation.sources_of_serviceproduct_or_messageeducation_this_month')(state);
                    // If the value is a string and we want to convert it to an integer, do so
                  if (typeof ProductServiceSource === 'string') {
                      ProductServiceSource = parseInt(ProductServiceSource, 10); // Convert to integer
                      //console.log("Converted ProductServiceSource:", ProductServiceSource); // Output: 2
                  } else {
                      //console.log("The value is not a string, it's already a number or other type.");
                  }


                  let sourceValue;

                  if (ProductServiceSource === 1) {
                      sourceValue = "health_facility";
                  } else if (ProductServiceSource === 2) {
                      sourceValue = "anchor_group";
                  } else if (ProductServiceSource === 3) {
                      sourceValue = "outreach";
                  } else if (ProductServiceSource === 4) {
                      sourceValue = "others";
                  } else {
                      sourceValue = ProductServiceSource;
                  }

                return {
                    date_created: dataValue('metadata.timeEnd'),
                    case_id: dataValue("form.case['@case_id']"),
                    reporting_period: dataValue("form['am2mcg_reporting_period'].report_period"),
                    monthlyprdct_distribution: dataValue("form['am2mcg_products_distributed'].monthlyprdct_distribution"),
                    sources_of_serviceproduct:sourceValue,
                    originator: 'v2',

                };
              }, {
              setNull: "'undefined'",
              logValues: true,
          }
          )

          //5.am2mcg_demonstrations_conducted
          upsert(
            'am2mcg_demonstrations_conducted',
            ['case_id','reporting_period'],
            {
              date_created:dataValue('metadata.timeEnd'),
              case_id:dataValue("form.case['@case_id']"),
              reporting_period:dataValue("form['am2mcg_reporting_period'].report_period"),
              demonstrations_done:dataValue("form['am2mcg_demonstrations_conducted'].demonstrations_done")||'none',
              originator: 'v2',
            },
            {
                    setNull: "'undefined'",
                    logValues: true,
                }
            ); //am2mcg_demonstrations_conducted


          //6.am2mcg_anthropometric_information
          upsert("am2mcg_anthropometric_information", ["case_id", "reporting_period"],
              state => {
                  const origBMI = dataValue('form.am2mcg_anthropometric_information.bmi_value_calc')(state);
                  const bmiValue = origBMI === "Infinity" ? 0 : (dataValue('form.am2mcg_anthropometric_information.bmi_value_calc')(state) || 0);
                  const pregnant=dataValue('form.am2mcg_demographics_information.pregnant')(state);
                  const lactating=dataValue('form.am2mcg_demographics_information.lactating')(state);
                  let muacValue=0;
                  if(pregnant=="yes"|| lactating=="yes"){
                    muacValue=dataValue('form.am2mcg_anthropometric_information.member_muac')(state)||0;
                  }



                  return {
                      date_created: dataValue("form.case['@date_modified']")(state),
                      case_id: dataValue("form.case['@case_id']")(state),
                      reporting_period: dataValue('form.am2mcg_reporting_period.report_period')(state),
                      bmi_calc: dataValue('form.am2mcg_anthropometric_information.bmi_calc')(state),
                      bmi_value: bmiValue,//Number(dataValue('form.am2mcg_anthropometric_information.bmi_value_calc')(state)) || 0,
                      heightcm: dataValue('form.am2mcg_anthropometric_information.member_heightcm')(state) || 0,
                      weightkg: dataValue('form.am2mcg_anthropometric_information.member_weightkg')(state) || 0,
                      muacvalue:muacValue || 0,
                      muac_membr: dataValue('form.am2mcg_anthropometric_information.muac_membr')(state) || 'NOT DONE',
                      originator: 'v2',
                  };
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Mother-2-Mother-Followup:
        source_trigger: webhook
        target_job: Mother-2-Mother-Followup
        condition_type: always
        enabled: true
  Producer-Mapping:
    name: Producer Mapping
    jobs:
      Map-Producer-To-Group:
        name: Map Producer To Group
        adaptor: '@openfn/language-mssql@5.0.10'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          fn
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Map-Producer-To-Group:
        source_trigger: webhook
        target_job: Map-Producer-To-Group
        condition_type: always
        enabled: true
  Production-Register:
    name: Production Register
    jobs:
      Production-Register:
        name: Production Register
        adaptor: '@openfn/language-mssql@5.0.10'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          
          //1. case management

          upsert("case_management", ["case_id", "reporting_period", "pax_group"],
              state => ({
                  case_id: dataValue("form.case['@case_id']"),
                  user_id: dataValue('metadata.username'),
                  reporting_period: dataValue('form.reporting_period.report_period'),
                  pax_group: "producer",
                  group_name: dataValue('form.referencerecords.groupname'),
                  group_no: dataValue('form.referencerecords.producer_group_no'),

                  date_created: dataValue("form.case['@date_modified']"),
                  date_modified: dataValue("form.case['@date_modified']"),
                  linked_facility: dataValue('form.girlh_groupdetails.linked_facility'),
                  the_county: dataValue('form.referencerecords.the_county'),
                  the_cu_name: dataValue('form.referencerecords.the_cu_name'),
                  the_location: dataValue('form.referencerecords.the_location'),
                  the_subcounty: dataValue('form.referencerecords.the_subcounty'),
                  the_village: dataValue('form.referencerecords.the_village'),
                  the_ward: dataValue('form.referencerecords.the_ward'),

                  //added on v2
                  facilitated_by: dataValue('form.facilitated_by.producer_facilitator'),
                  username: dataValue('form.meta.username'),
                  app_build_version: dataValue('form.meta.app_build_version'),
                  submit_ip: dataValue('submit_ip'),
                  originator: 'v2',//tracking the origin of the forwarder

              }),
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );

          fn(state => {
            const cleanNumber = (value) => {
              if (value === undefined || value === null) return 0;
              const cleaned = String(value).replace(/[^\d.-]/g, '');
              return isNaN(parseFloat(cleaned)) ? 0 : parseFloat(cleaned);
            };

            const cleanedData = {
                case_id: dataValue("form.case['@case_id']")(state),
                report_period: dataValue('form.reporting_period.report_period')(state),
                group_no: dataValue('form.referencerecords.producer_group_no'),
                // ... other non-numeric fields ...
                type_of_livestock: dataValue('form.livestock_types.livestocks.type_of_livestock'),
                technology_adopted_livestock: dataValue('form.livestock_types.technology_adopted_livestock'),
                date_created: dataValue("form.case['@date_modified']"),
                username: dataValue('metadata.username'),
                product_distributed_includes: dataValue('form.products_distributed.product_distributed_inlcudes'),
                
                HHID_output: dataValue('form.referencerecords.HHID_output'),
                hhm_age_months: dataValue('form.referencerecords.hhm_age_months'),
                sex: dataValue('form.referencerecords.sex'),
                production_type: dataValue('form.pro_type_lbl.production_type'),
                groupname: dataValue("form.referencerecords['groupname']"),
                the_county: dataValue('form.referencerecords.the_county'),
                the_location: dataValue('form.referencerecords.the_location'),
                the_subcounty: dataValue('form.referencerecords.the_subcounty'),
                the_village: dataValue('form.referencerecords.the_village'),
                the_ward: dataValue('form.referencerecords.the_ward'),
                Amount_from_Sales: dataValue('form.total_amount__from_sales.Amount_from_Sales'),
                registers_total_amount: dataValue('form.total_amount__from_sales.registers_total_amount'),
                report_month: dataValue('form.reporting_period.report_month'),
                report_year: dataValue('form.reporting_period.report_year'),
                submit_ip: dataValue('submit_ip'),
                originator: "v2",

                type_of_crops: dataValue('form.crop_types.crop.type_of_crops'),
                technology_adopted_crop: dataValue('form.crop_types.technology_adopted_crop'),
                demonstrations_ticked: dataValue('form.demonstrations_tick.demonstrations_ticked'),
                producer_facilitator: dataValue('form.facilitated_by.producer_facilitator'),



              // Clean numeric fields
              Amount_from_Sales: cleanNumber(dataValue('form.total_amount__from_sales.Amount_from_Sales')(state)),
              registers_total_amount: cleanNumber(dataValue('form.total_amount__from_sales.registers_total_amount')(state)),
              acreage_alv: cleanNumber(dataValue("form.crop_types.crop.alv['question8'].acreage_of_land_for_alv")(state)),
              alv_qtykg: cleanNumber(dataValue("form.crop_types.crop.alv['question8'].alv_qtykg")(state)),
              alv_qtykgsold: cleanNumber(dataValue("form.crop_types.crop.alv['question8'].alv_qtykgsold")(state)),
              amount4_alv: cleanNumber(dataValue("form.crop_types.crop.alv['question8']['amount4alv']")(state)),
              price4_alv: cleanNumber(dataValue("form.crop_types.crop.alv['question8']['price4alv']")(state)),
              // ... continue for all numeric fields ...
              acreage_alv:cleanNumber(dataValue("form.crop_types.crop.alv['question8'].acreage_of_land_for_alv")(state)),
                alv_qtykg:cleanNumber(dataValue("form.crop_types.crop.alv['question8'].alv_qtykg")(state)),
                alv_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.alv['question8'].alv_qtykgsold")(state)),
                amount4_alv:cleanNumber(dataValue("form.crop_types.crop.alv['question8']['amount4alv']")(state)),
                price4_alv:cleanNumber(dataValue("form.crop_types.crop.alv['question8']['price4alv']")(state)),
                
                acreage_amaranth:cleanNumber(dataValue("form.crop_types.crop.amaranth['question10'].acreage_of_land_for_amaranth")(state)),
                amaranth_qtykg:cleanNumber(dataValue("form.crop_types.crop.amaranth['question10'].amaranth_qtykg")(state)),
                amaranth_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.amaranth['question10'].amaranth_qtykgsold")(state)),
                amount4_amarantha:cleanNumber(dataValue("form.crop_types.crop.amaranth['question10']['amount4amarantha']")(state)),
                price4_amaranth:cleanNumber(dataValue("form.crop_types.crop.amaranth['question10']['price4amaranth']")(state)),
                
                acreage_butter_nuts:cleanNumber(dataValue("form.crop_types.crop.butter_nuts['question12'].acreage_of_land_for_butter_nuts")(state)),
                amount4_butternuts:cleanNumber(dataValue("form.crop_types.crop.butter_nuts['question12']['amount4butternuts']")(state)),
                butter_nuts_qtykg:cleanNumber(dataValue("form.crop_types.crop.butter_nuts['question12'].butter_nuts_qtykg")(state)),
                butternuts_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.butter_nuts['question12'].butternuts_qtykgsold")(state)),
                price4_butternuts:cleanNumber(dataValue("form.crop_types.crop.butter_nuts['question12']['price4butternuts']")(state)),
                
                acreage_cowpeas:cleanNumber(dataValue("form.crop_types.crop.cowpeas['question11'].acreage_of_land_for_cowpeas")(state)),
                amount4_cowpeas:cleanNumber(dataValue("form.crop_types.crop.cowpeas['question11']['amount4cowpeas']")(state)),
                cowpeas_qtykg:cleanNumber(dataValue("form.crop_types.crop.cowpeas['question11'].cowpeas_qtykg")(state)),
                cowpeas_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.cowpeas['question11'].cowpeas_qtykgsold")(state)),
                price4_cowpeas:cleanNumber(dataValue("form.crop_types.crop.cowpeas['question11']['price4cowpeas']")(state)),
                
                acreage_jute_mallow:cleanNumber(dataValue("form.crop_types.crop.jute_mallow['question9'].acreage_of_land_for_jute_mallow")(state)),
                amount4_jutemallow:cleanNumber(dataValue("form.crop_types.crop.jute_mallow['question9']['amount4jutemallow']")(state)),
                jute_mallow_qtykg:cleanNumber(dataValue("form.crop_types.crop.jute_mallow['question9'].jute_mallow_qtykg")(state)),
                jutemallow_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.jute_mallow['question9'].jutemallow_qtykgsold")(state)),
                price4_jutemallow:cleanNumber(dataValue("form.crop_types.crop.jute_mallow['question9']['price4jutemallow']")(state)),
                
                amount4_kales:cleanNumber(dataValue("form.crop_types.crop.kales['question7']['amount4kales']")(state)),
                acreage_kales:cleanNumber(dataValue("form.crop_types.crop.kales['question7'].kales_land_sizeacres")(state)),
                kales_qtykg:cleanNumber(dataValue("form.crop_types.crop.kales['question7'].kales_qtykg")(state)),
                kales_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.kales['question7'].kales_qtykgsold")(state)),
                price4_kales:cleanNumber(dataValue("form.crop_types.crop.kales['question7']['price4kales']")(state)),
                
                acreage_onion:cleanNumber(dataValue("form.crop_types.crop.onions['question14'].acreage_of_land_for_onion")(state)),
                amount4_onions:cleanNumber(dataValue("form.crop_types.crop.onions['question14']['amount4onions']")(state)),
                onion_qtykg:cleanNumber(dataValue("form.crop_types.crop.onions['question14'].onion_qtykg")(state)),
                onion_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.onions['question14'].onion_qtykgsold")(state)),
                price4_onion:cleanNumber(dataValue("form.crop_types.crop.onions['question14']['price4onion']")(state)),
                
                acreage_spinach:cleanNumber(dataValue("form.crop_types.crop.spinach['question16'].acreage_of_land_for_spinach")(state)),
                amount4_spinch:cleanNumber(dataValue("form.crop_types.crop.spinach['question16']['amount4spinch']")(state)),
                price4_spinach:cleanNumber(dataValue("form.crop_types.crop.spinach['question16']['price4spinach']")(state)),
                spinach_qtykg:cleanNumber(dataValue("form.crop_types.crop.spinach['question16'].spinach_qtykg")(state)),
                spinach_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.spinach['question16'].spinach_qtykgsold")(state)),
                
                acreage_tomatoes:cleanNumber(dataValue("form.crop_types.crop.tomatoes['question13'].acreage_of_land_for_tomatoes")(state)),
                amount4_tomatoes:cleanNumber(dataValue("form.crop_types.crop.tomatoes['question13']['amount4tomatoes']")(state)),
                price4_tomatoes:cleanNumber(dataValue("form.crop_types.crop.tomatoes['question13']['price4tomatoes']")(state)),
                tomatoes_qtykg:cleanNumber(dataValue("form.crop_types.crop.tomatoes['question13'].tomatoes_qtykg")(state)),
                tomatoes_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.tomatoes['question13'].tomatoes_qtykgsold")(state)),
                
                acreage_water_melon:cleanNumber(dataValue("form.crop_types.crop.watermelon['question1'].acreage_of_land_for_water_melon")(state)),
                amount4_watermelon:cleanNumber(dataValue("form.crop_types.crop.watermelon['question1']['price4watermelon']")(state)),
                price4_watermelon:cleanNumber(dataValue("form.crop_types.crop.watermelon['question1']['price4watermelon']")(state)),
                water_melon_qtykg:cleanNumber(dataValue("form.crop_types.crop.watermelon['question1'].water_melon_qtykg")(state)),
                watermelon_qtykgsold:cleanNumber(dataValue("form.crop_types.crop.watermelon['question1'].watermelon_qtykgsold")(state)),
                
              
                amount_from_sales_ksh_for_the_goat:cleanNumber(dataValue('form.livestock_types.livestocks.goatsec.amount_from_sales_ksh_for_the_goat')(state)),
                nogoatraised:cleanNumber(dataValue('form.livestock_types.livestocks.goatsec.nogoatraised')(state)),
                number_livestock_sold_the_goat:cleanNumber(dataValue('form.livestock_types.livestocks.goatsec.number_livestock_sold_the_goat')(state)),
                
                amount_from_sales_ksh_for_poultry:cleanNumber(dataValue('form.livestock_types.livestocks.poultrysec.amount_from_sales_ksh_for_poultry')(state)),
                nopoultryraised:cleanNumber(dataValue('form.livestock_types.livestocks.poultrysec.nopoultryraised')(state)),
                number_livestock_sold_poultry:cleanNumber(dataValue('form.livestock_types.livestocks.poultrysec.number_livestock_sold_poultry')(state)),
                
                amount_from_sales_ksh_for_the_sheep:cleanNumber(dataValue('form.livestock_types.livestocks.sheepsec.amount_from_sales_ksh_for_the_sheep')(state)),
                nosheepraised:cleanNumber(dataValue('form.livestock_types.livestocks.sheepsec.nosheepraised')(state)),
                number_livestock_soldsheep:cleanNumber(dataValue('form.livestock_types.livestocks.sheepsec.number_livestock_soldsheep')(state)),
                
                
            };

            return { ...state, cleanedData };
          });

          upsert(
            'producerregister',
            ["case_id", 'report_period'],
            state => state.cleanedData,
            { setNull: "'undefined'", logValues: true }
          );
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Production-Register:
        source_trigger: webhook
        target_job: Production-Register
        condition_type: always
        enabled: true
  R4N-Register:
    name: R4N Register
    jobs:
      R4N-Register:
        name: R4N Register
        adaptor: '@openfn/language-mssql@v4.0.3'
        credential: null
        body: |
          upsert(
              'case_management',
              ['case_id', 'reporting_period'],
              {
                  case_id:dataValue("form.case['@case_id']") ,
                  pax_group:dataValue("form['reap4n_demographics_information'].pax_group")|| "",
                  group_name:dataValue("form['reap4n_demographics_information'].group_name")  || "",
                  reporting_period:dataValue("form['monthly_reap4n_reporting_information'].report_period") ,
                  user_id:dataValue("form.case['@user_id']") ,
                  date_created:dataValue("form.case['@date_modified']") ,
                  date_modified:dataValue("form.case['@date_modified']"),
                  linked_facility:dataValue('form.case.update.linked_facility'),
                  the_county:dataValue('form.case.update.the_county')||"",
                  the_cu_name:dataValue('form.case.update.the_cu_name')||"",
                  the_location:dataValue('form.case.update.the_location')||"",
                  the_subcounty:dataValue('form.case.update.the_subcounty')||"",
                  the_village:dataValue('form.case.update.the_village')||"",
                  the_ward:dataValue('form.case.update.the_ward')||"",
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );//case management: r4n
          upsert(
              'reap4n_demographics_information',
              ['case_id', 'reporting_period'],
              {
                  case_id:dataValue("form.case['@case_id']") ,
                  reporting_period:dataValue("form['monthly_reap4n_reporting_information'].report_period") ,
                  date_created:dataValue("form.case['@date_modified']"),
                  
                  HHID_hh:dataValue("form['reap4n_demographics_information'].HHID_hh") ,
                  HHID_output:dataValue("form['reap4n_demographics_information'].HHID_output"),
                  age:0,//dataValue("form['reap4n_demographics_information'].age") ,
                  r4n_lactating:dataValue("form['reap4n_demographics_information'].grilh_lactating"),
                  r4n_pregnant:dataValue("form['reap4n_demographics_information'].grilh_pregnant"),
                  group_name:dataValue("form['reap4n_demographics_information'].group_name"),
                  how_many_female_24_59m:dataValue("form['reap4n_demographics_information']['how_many_female_24_59m']"),
                  how_many_male_24_59m:dataValue("form['reap4n_demographics_information']['how_many_male_24_59m']"),
                  hvchildren0to5m:dataValue("form['reap4n_demographics_information']['hvchildren0to5m']"),
                  hvchildren10to14yrs:dataValue("form['reap4n_demographics_information']['hvchildren10to14yrs']"),
                  hvchildren15to19yrs:dataValue("form['reap4n_demographics_information']['hvchildren15to19yrs']"),
                  hvchildren24to59m:dataValue("form['reap4n_demographics_information']['hvchildren24to59m']"),
                  hvchildren5to9yrs:dataValue("form['reap4n_demographics_information']['hvchildren5to9yrs']"),
                  hvchildren6to23m:dataValue("form['reap4n_demographics_information']['hvchildren6to23m']"),
                  new_group_type:dataValue("form['reap4n_demographics_information'].new_group_type"),
                  participant_name:dataValue("form['reap4n_demographics_information'].participant_name"),
                  pax_group:dataValue("form['reap4n_demographics_information'].pax_group"),
                  reap4n_social_status:dataValue("form['reap4n_demographics_information']['reap4n_social_status']"),
                  sex:dataValue("form['reap4n_demographics_information'].sex")
           
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );//reap4n_demographics_information
          upsert(
              'reap4n_anthropometric_information',
              ['case_id', 'reporting_period'],
              {
                  case_id:dataValue("form.case['@case_id']") ,
                  reporting_period:dataValue("form['monthly_reap4n_reporting_information'].report_period") ,
                  date_created:dataValue("form.case['@date_modified']"),
                  MUAC_status_calc:dataValue("form['reap4n_anthropometric_information'].MUAC_status_calc"),
                	bmi_status_calc:dataValue("form['reap4n_anthropometric_information'].bmi_status_calc"),
                	bmi_value:dataValue("form['reap4n_anthropometric_information'].bmi_value"),
                	muac_membr: dataValue("form['reap4n_anthropometric_information'].muac_membr"),
                	r4nheightcm:dataValue("form['reap4n_anthropometric_information']['r4nheightcm']"),
                	r4nweightkg:dataValue("form['reap4n_anthropometric_information']['r4nweightkg']")

              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );//reap4n_anthropometric_information
          upsert(
              'reap4n_monthly_interventions',
              ['case_id', 'reporting_period'],
              {
                  case_id:dataValue("form.case['@case_id']") ,
                  reporting_period:dataValue("form['monthly_reap4n_reporting_information'].report_period") ,
                  date_created:dataValue("form.case['@date_modified']"),
                  
                  grp_weekly_sessionscode:dataValue("form['reap4n_monthly_interventions'].grp_weekly_sessionscode"),
                  interv_healthnutrition:dataValue("form['reap4n_monthly_interventions'].interv_healthnutrition"),
                  interv_referral:dataValue("form['reap4n_monthly_interventions'].interv_referral"),
                  interv_referrals:dataValue("form['reap4n_monthly_interventions'].interv_referrals"),
                  interv_socialservices:dataValue("form['reap4n_monthly_interventions'].interv_socialservices"),
                  resillient_livelihoods:dataValue("form['reap4n_monthly_interventions'].resillient_livelihoods")
                 
              },
              {
                  setNull: "'undefined'",
                  logValues: true,
              }
          );//reap4n_monthly_interventions

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->R4N-Register:
        source_trigger: webhook
        target_job: R4N-Register
        condition_type: js_expression
        condition_label: R4N Trigger
        condition_expression: |
          state.data.form.#type == "data" && state.data.form["@name"] == "REAP 4N Register (Monthly)"
        enabled: true
  SaveHH-Members:
    name: SaveHH Members
    jobs:
      SaveHH-Members:
        name: SaveHH Members
        adaptor: '@openfn/language-mssql@latest'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          /*
          fn(state => {
            const myNumber = Math.floor(Math.random() * 100);
            //console.log('This is myNumber', myNumber);

            return { ...state, myNumber };
          });
          */

          upsert(
            'households',
            'case_id',
            {
              number: '0123456789',//this.Math.floor(Math.random() * 100),
              form_id: dataValue('id'),
              consent: dataValue('form.hh_information.Participants_consent'),
              house_hold_id: dataValue('form.Household_information.hh_identification_number'),
              created_date: dataValue('form.Household_information.date_of_collectiontoday'),
              family_setup: dataValue('form.Household_information.family_type'),
              livelihood_zone: dataValue('form.Household_information.livelihood_zone'),
              functional_latrine: dataValue('form.Household_information.functional_latrine'),
              water_sources: dataValue('form.Household_information.the_acess_to_safe_water'),
              other_water_sources: dataValue('form.Household_information.othersstate_if_other_water_sources'),
              hand_washing_facilities: dataValue('form.Household_information.hand_washing_facilities'),
              Disposal_facility: dataValue('form.Household_information.refuse_disposal_facility'),

              child_mortal_28_days: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_0_28days'),
              child_mortal_eleven_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_29days_11months'),
              child_mortal_fifty_nine_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_12_59months'),
              maternal_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_maternal_deaths_0_42days'),
              other_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_otherdeaths_notcounted'),

              county: dataValue('form.Household_information.The_CountyLabel.the_county'),
              sub_county: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),
              ward: dataValue('form.Household_information.ward_details.the_ward'),
              location_l: dataValue('form.Household_information.question5.the_location'),
              village: dataValue('form.Household_information.thevillage_name.the_village'),
              new_village: dataValue('form.case.update.is_this_new_village'),
              system_list: dataValue('form.case.update.new_village'),

              house_hold_size: dataValue('form.Household_information.hh_count'),
              CU_name: dataValue('form.Household_information.the_cu_name'),
              linked_facility_in_cu: dataValue('form.Household_information.linked_facility_in_cu'),

              HHID_hh: dataValue('form.Household_information.HHID_hh'),

              completed_time: dataValue('metadata.timeEnd'),
              started_time: dataValue('metadata.timeStart'),
              user_name: dataValue('metadata.username'),

              received_on: dataValue('received_on'),

              form_link: dataValue("attachments['form.xml']['url']"), //dataValue('attachments'),
              hq_user: dataValue('metadata.username'),

              case_id: dataValue('form.case.@case_id'),
              srtt_village: 'SRTT_VILLAGE' + Math.floor(Math.random() * 100),
            },
            {
              setNull: "'undefined'",
              logValues: true,
            }
          );

          //Looping to get the chidren data
          upsertMany(
            'hh_members',
            'case_id',
            state => {
              const dataArray = state.data.form.hh_members_registration || [];
              
             //if (Array.isArray(dataArray)) {
              const azureHHmembers = dataArray.map((x, i) => {
                const hhCodes = x.pax_identifier_information.HHID_output.split('HH');
                const hhMemberId = `HH${hhCodes[1]}-${i}`;
                //console.log('The hhMemberId is:', hhMemberId);

                return {
                  //=============================My Loop values:=============
                  number: hhMemberId,

                  Participant_id: x.pax_identifier_information.hhm_id,

                  fname: x.pax_identifier_information.PAX_info.first_name,
                  mname: x.pax_identifier_information.PAX_info.middle_name,
                  lname: x.pax_identifier_information.PAX_info.last_name,
                  nickname: x.pax_identifier_information.PAX_info.nickname,

                  gender: x.pax_identifier_information.PAX_info.sex,
                  dob: x.pax_identifier_information.PAX_info.hhm_dob,
                  mobileno: x.pax_identifier_information.PAX_info.hhm_phone_number,

                  id_huduma: x.pax_identifier_information.PAX_info.id_number,
                  relationship: x.pax_identifier_information.PAX_info.hhm_relationship,
                  disability: x.pax_identifier_information.PAX_info.disability,
                  participant_grp: x.pax_identifier_information.persons_info.pax_group,

                  female_status: x.pax_identifier_information.special_groups.this_woman_is,
                  // MUAC_value: x.pax_identifier_information.special_groups.MUAC_status_calc,
                  MUAC_value: x.pax_identifier_information.special_groups.muac_value || 0,

                  // delivery_date: x.pax_identifier_information.PAX_info.middle_name,
                  source_of_livelihood: x.pax_identifier_information.special_groups.livelihood,
                  mom_child_booklet: x.pax_identifier_information.has_motherchildbooklet,
                  community_unit: x.pax_identifier_information.the_cu_name,

                  // TODO: please check where these value are found ------------------
                  //comm_frp_mobile: x.pax_identifier_information.chs_hh.question_list_chusla.chs_contact,
                  comm_frp_mobile:dataValue('form.case.update.chs_contact'),
                  // CHS_hh_number: x.pax_identifier_information.chs_hh.question_list_chusla.CHS_Household_Number,
                  // -----------------------------------------------------------------

                  facility_comm_unit: x.pax_identifier_information.linked_facility_in_cu,

                  // health_insurance: x.pax_identifier_information.chs_hh.question_list_chusla.do_you_have_health_insurance_cover,
                  // health_insurance_details: x.pax_identifier_information.PAX_info.middle_name,

                  // birth_cert: x.pax_identifier_information.PAX_info.middle_name,
                  // birth_cert_no: x.pax_identifier_information.chs_hh.question_list_chusla.birth_certificate_no,

                  // orphan: x.pax_identifier_information.chs_hh.question_list_chusla.orphan,

                  // other_health_insurance: x.pax_identifier_information.PAX_info.middle_name,

                  // schooling: x.pax_identifier_information.chs_hh.question_list_chusla.in_school,

                  // vitamin_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_vitamin_a_given || '',
                  // penta_3_given: x.pax_identifier_information.chs_hh.question_list_chusla.was_penta_3_given || '',
                  // immunized: x.pax_identifier_information.chs_hh.question_list_chusla.is_a_child_fully_immunized_under_1_yr_old || '',
                  // measles_rubella_immunized: x.pax_identifier_information.chs_hh.question_list_chusla.measles_rubella_at_2_years || '',
                  // delivery_place: x.pax_identifier_information.chs_hh.question_list_chusla.state_the_place_of_delivery || '',

                  full_name: x.pax_identifier_information.PAX_info.pax_full_name,
                  age_months: x.pax_identifier_information.PAX_info.hhm_age_months,
                  hhm_age_years: x.pax_identifier_information.PAX_info.hhm_age_years,
                  under_5: x.pax_identifier_information.PAX_info.under_5,
                  MUAC_status_calc: x.pax_identifier_information.special_groups.MUAC_status_calc || '',
                  family_setup: x.pax_identifier_information.family_setup,
                  orphan_second: x.case.update.orphan,
                  fully_immunized_under_one: x.pax_identifier_information.fully_immunized_under_one,

                  functional_latrine: x.pax_identifier_information.functional_latrine,
                  mother_child_booklet: x.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,

                  The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),
                  subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),
                  the_ward: x.pax_identifier_information.the_ward,
                  The_location: x.pax_identifier_information.the_location,
                  the_village: x.pax_identifier_information.the_village,
                  srtt_village: 'SRTT_VILLAGE_ ' + x.pax_identifier_information.the_village,

                  collected_by: x.pax_identifier_information.user_collected_is,
                  date_of_collection: x.pax_identifier_information.date_of_collection,
                  hhid_output: x.case.update.HHID_output,

                  vitamin_a_under1: x.pax_identifier_information['vitamin_a_under1'],

                  case_id: x.case['@case_id'],
                  parent_case_id: dataValue('form.case.@case_id'), //foreign key for households

                  GPS: x.pax_identifier_information.GPS,
                  date_posted: new Date().toISOString(),
                };
              });
              return azureHHmembers;
           
            },

            { setNull: false, writeSql: true, logValues: false }
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->SaveHH-Members:
        source_trigger: webhook
        target_job: SaveHH-Members
        condition_type: always
        enabled: true
  test:
    name: test
    jobs:
      Fetch-Patients-Records:
        name: Fetch Patients Records
        adaptor: '@openfn/language-http@7.0.2'
        credential: null
        body: |
          /*fn(state => {
            const currentDate = new Date();
            const dateString = dateFns.format(currentDate, 'dd_MM_yyyy');
            const randomPart = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
            const randomId = `${dateString}_${randomPart}`;

            console.log(`This is the new name: ${state.data.name}`);
            console.log(`Generated random ID: ${randomId}`);
            return {...state, randomId};
          });
          */
          //check for the array in case of one or several household members
          fn(state => {
            // Safely access hh_members_registration, defaulting to an empty array if it doesn't exist
            const dataToProcess = state.data?.form?.hh_members_registration;
            
            if (Array.isArray(dataToProcess)) {
              console.log(`Processing ${dataToProcess.length} records`);
              // Process the array here
              const processedData = dataToProcess.map(record => {
                // Do something with each record
                return { ...record, processed: true };
              });
              return { ...state, processedRecords: processedData,fullHousehold:true};
            } else {
              console.log('No array of records found to process');
              return {...state,fullHousehold:false};
            }
          });
      Create-HH-and-Members:
        name: Create HH and Members
        adaptor: '@openfn/language-mssql@5.0.10'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          
          upsert(
            'households',
            ['case_id'],
            state => {
              const caseId = dataValue("form.case['@case_id']")(state);
              const villageId = dataValue("form.Household_information.thevillage_name.the_village")(state);
              //const srttVillage = state.references[0].rows[0]?.srtt_village || 'NO SRTT';
              //console.log('Extracted case_id:', caseId);
              return {
                number: Math.floor(Math.random() * 100),
                case_id: caseId,
                form_id: dataValue('id'),
                consent: dataValue('form.hh_information.Participants_consent'),
                house_hold_id: dataValue('form.Household_information.hh_identification_number'),
                created_date: dataValue('form.Household_information.date_of_collectiontoday'),
                family_setup: dataValue('form.Household_information.family_type'),
                livelihood_zone: dataValue('form.Household_information.livelihood_zone'),
                functional_latrine: dataValue('form.Household_information.functional_latrine'),
                water_sources: dataValue('form.Household_information.the_acess_to_safe_water'),
                other_water_sources: dataValue('form.Household_information.othersstate_if_other_water_sources'),
                hand_washing_facilities: dataValue('form.Household_information.hand_washing_facilities'),
                Disposal_facility: dataValue('form.Household_information.refuse_disposal_facility'),
                child_mortal_28_days: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_0_28days'),
                child_mortal_eleven_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_29days_11months'),
                child_mortal_fifty_nine_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_12_59months'),
                maternal_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_maternal_deaths_0_42days'),
                other_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_otherdeaths_notcounted'),

                county: dataValue('form.Household_information.The_CountyLabel.the_county'),
                sub_county: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),
                ward: dataValue('form.Household_information.ward_details.the_ward'),
                location_l: dataValue('form.Household_information.question5.the_location'),
                village: dataValue('form.Household_information.thevillage_name.the_village'),
                new_village: dataValue('form.case.update.is_this_new_village'),
                system_list: dataValue('form.case.update.new_village'),

                house_hold_size: dataValue('form.Household_information.hh_count'),
                CU_name: dataValue('form.Household_information.the_cu_name'),
                linked_facility_in_cu: dataValue('form.Household_information.linked_facility_in_cu'),

                HHID_hh: dataValue('form.Household_information.HHID_hh'),

                completed_time: dataValue('metadata.timeEnd'),
                started_time: dataValue('metadata.timeStart'),
                user_name: dataValue('metadata.username'),

                received_on: dataValue('received_on'),

                form_link: dataValue("attachments['form.xml']['url']"), //dataValue('attachments'),
                hq_user: dataValue('metadata.username'),

                srtt_village: 'NO SRTT',
                /*srtt_village: findValue({
                        relation: 'hh_members',
                        where: { the_village: villageId },
                        operator: { the_village: '=' },
                        uuid: 'srtt_village'
                      })(state) || 'NO SRTT',*/
                originator: 'v2',
              }
            },
            {
              setNull: "'undefined'",
              logValues: true,
            }
          );

          upsertMany(
            'hh_members',
            'case_id',
            state => {
              const dataArray = state.data.form.hh_members_registration || [];
              const azureHHmembers = dataArray.map((x, i) => {
                const hhId = x.pax_identifier_information.HHID_output.split('HH'); // Assuming this is the household ID
                const memberNo = `HH${hhId[1]}-${i}`; // Creates a unique member number
                console.log(memberNo);

                return {
                  case_id: x.case['@case_id'],
                  parent_case_id: state.data.form.case['@case_id'],
                  number: memberNo,
                  Participant_id: x.pax_identifier_information.hhm_id,
                  hhid_output: x.case.update.HHID_output,
                  fname: x.pax_identifier_information.PAX_info.first_name,
                  mname: x.pax_identifier_information.PAX_info.middle_name,
                  lname: x.pax_identifier_information.PAX_info.last_name,
                  nickname: x.pax_identifier_information.PAX_info.nickname,
                  gender: x.pax_identifier_information.PAX_info.sex,
                  dob: x.pax_identifier_information.PAX_info.hhm_dob,
                  mobileno: x.pax_identifier_information.PAX_info.hhm_phone_number,
                  id_huduma: x.pax_identifier_information.PAX_info.id_number,
                  relationship: x.pax_identifier_information.PAX_info.hhm_relationship,
                  disability: x.pax_identifier_information.PAX_info.disability,
                  participant_grp: x.pax_identifier_information.persons_info.pax_group,
                  female_status: x.pax_identifier_information.special_groups.this_woman_is,
                  // MUAC_value: x.pax_identifier_information.special_groups.MUAC_status_calc,
                  MUAC_value: x.pax_identifier_information.special_groups.muac_value || 0,
                  // delivery_date: x.pax_identifier_information.PAX_info.middle_name,
                  source_of_livelihood: x.pax_identifier_information.special_groups.livelihood,
                  mom_child_booklet: x.pax_identifier_information.has_motherchildbooklet,
                  community_unit: x.pax_identifier_information.the_cu_name,
                  comm_frp_mobile: dataValue('form.case.update.chs_contact'),
                  facility_comm_unit: x.pax_identifier_information.linked_facility_in_cu,
                  full_name: x.pax_identifier_information.PAX_info.pax_full_name,
                  age_months: x.pax_identifier_information.PAX_info.hhm_age_months,
                  hhm_age_years: x.pax_identifier_information.PAX_info.hhm_age_years,
                  under_5: x.pax_identifier_information.PAX_info.under_5,
                  MUAC_status_calc: x.pax_identifier_information.special_groups.MUAC_status_calc || '',
                  family_setup: x.pax_identifier_information.family_setup,
                  orphan_second: x.case.update.orphan,
                  fully_immunized_under_one: x.pax_identifier_information.fully_immunized_under_one,
                  functional_latrine: x.pax_identifier_information.functional_latrine,
                  mother_child_booklet: x.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,
                  The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),
                  subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),
                  the_ward: x.pax_identifier_information.the_ward,
                  The_location: x.pax_identifier_information.the_location,
                  the_village: x.pax_identifier_information.the_village,
                  schooling: x.pax_identifier_information.chs_hh.in_school||'',

                  srtt_village: 'SRTT_VILLAGE_ ' + x.pax_identifier_information.the_village,

                  collected_by: x.pax_identifier_information.user_collected_is,
                  date_of_collection: x.pax_identifier_information.date_of_collection,
                  hhid_output: x.case.update.HHID_output,
                  vitamin_a_under1: x.pax_identifier_information['vitamin_a_under1'],
                  GPS: x.pax_identifier_information.GPS,

                  originator: 'v2',
                  //is_head_of_household: i === 0 ? true : false,
                  date_posted: new Date().toISOString(),
                  //updated_at: new Date().toISOString()
                };
              });

              //console.log('Data to upsert:', JSON.stringify(azureHHmembers, null, 2));
              return azureHHmembers;
            },
            { setNull: false, writeSql: true, logValues: true }
          );

      Add-Member-To-A-HH:
        name: Add Member To A HH
        adaptor: '@openfn/language-mssql@5.0.11'
        credential: pkioi@mercycorps.org-SQL-AZURE
        body: |
          /*fn(state => {
            console.log(`This is a single Member ${state.fullHousehold}`);
            return state;
          });

          sql(state => ({
            query: `SELECT * FROM hh_members WHERE hhid_output = '${state.fullHousehold}'`
          }));

          //add the member to the hh_members
          */
          fn(state => {
            const myConsent = dataValue('form.hh_information.Participants_consent');
            return { ...state, myConsent };
          });

          upsert(
            'households',
            ['case_id'],
            state => {
              const caseId = dataValue("form.case['@case_id']")(state);
              const villageId = dataValue("form.Household_information.thevillage_name.the_village")(state);
              //const srttVillage = state.references[0].rows[0]?.srtt_village || 'NO SRTT';
              //console.log('Extracted case_id:', caseId);
              return {
                number: Math.floor(Math.random() * 100),
                case_id: caseId,
                form_id: dataValue('id'),
                consent: dataValue('form.hh_information.Participants_consent'),
                house_hold_id: dataValue('form.Household_information.hh_identification_number'),
                created_date: dataValue('form.Household_information.date_of_collectiontoday'),
                family_setup: dataValue('form.Household_information.family_type'),
                livelihood_zone: dataValue('form.Household_information.livelihood_zone'),
                functional_latrine: dataValue('form.Household_information.functional_latrine'),
                water_sources: dataValue('form.Household_information.the_acess_to_safe_water'),
                other_water_sources: dataValue('form.Household_information.othersstate_if_other_water_sources'),
                hand_washing_facilities: dataValue('form.Household_information.hand_washing_facilities'),
                Disposal_facility: dataValue('form.Household_information.refuse_disposal_facility'),
                child_mortal_28_days: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_0_28days'),
                child_mortal_eleven_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_29days_11months'),
                child_mortal_fifty_nine_months: dataValue('form.number_of_deaths_in_the_months.no_of_deaths_12_59months'),
                maternal_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_maternal_deaths_0_42days'),
                other_deaths: dataValue('form.number_of_deaths_in_the_months.no_of_otherdeaths_notcounted'),

                county: dataValue('form.Household_information.The_CountyLabel.the_county'),
                sub_county: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),
                ward: dataValue('form.Household_information.ward_details.the_ward'),
                location_l: dataValue('form.Household_information.question5.the_location'),
                village: dataValue('form.Household_information.thevillage_name.the_village'),
                new_village: dataValue('form.case.update.is_this_new_village'),
                system_list: dataValue('form.case.update.new_village'),

                house_hold_size: dataValue('form.Household_information.hh_count'),
                CU_name: dataValue('form.Household_information.the_cu_name'),
                linked_facility_in_cu: dataValue('form.Household_information.linked_facility_in_cu'),

                HHID_hh: dataValue('form.Household_information.HHID_hh'),

                completed_time: dataValue('metadata.timeEnd'),
                started_time: dataValue('metadata.timeStart'),
                user_name: dataValue('metadata.username'),

                received_on: dataValue('received_on'),

                form_link: dataValue("attachments['form.xml']['url']"), //dataValue('attachments'),
                hq_user: dataValue('metadata.username'),

                srtt_village: 'NO SRTT',
                /*srtt_village: findValue({
                        relation: 'hh_members',
                        where: { the_village: villageId },
                        operator: { the_village: '=' },
                        uuid: 'srtt_village'
                      })(state) || 'NO SRTT',*/
                originator: 'v2',
              }
            },
            {
              setNull: "'undefined'",
              logValues: true,
            }
          );
          //====add the member to the household
          if (state.myConsent == 'agree') {
            upsert(
              'hh_members',
              ['case_id'],
              state => {
                const parentCaseId = dataValue("form.case['@case_id']")(state);
                //console.log('Parent case_id:', parentCaseId);
                const memberArray = state.data.form.hh_members_registration
                // Let's try to find the member case_id
                let caseId;
                if (state.data.form.hh_members_registration) {
                  //console.log('there is some data in here');
                  caseId = memberArray.case['@case_id'];

                  //console.log('Member case_id:', caseId);


                  return {
                    number: Math.floor(Math.random() * 100),
                    parent_case_id: parentCaseId,
                    case_id: caseId,
                    Participant_id: memberArray.pax_identifier_information.hhm_id,
                    fname: memberArray.pax_identifier_information.PAX_info.first_name,
                    mname: memberArray.pax_identifier_information.PAX_info.middle_name,
                    lname: memberArray.pax_identifier_information.PAX_info.last_name,
                    nickname: memberArray.pax_identifier_information.PAX_info.nickname,

                    gender: memberArray.pax_identifier_information.PAX_info.sex,
                    dob: memberArray.pax_identifier_information.PAX_info.hhm_dob,
                    mobileno: memberArray.pax_identifier_information.PAX_info.hhm_phone_number,
                    id_huduma: memberArray.pax_identifier_information.PAX_info.id_number,
                    relationship: memberArray.pax_identifier_information.PAX_info.hhm_relationship,
                    disability: memberArray.pax_identifier_information.PAX_info.disability,
                    participant_grp: memberArray.pax_identifier_information.persons_info.pax_group,
                    female_status: memberArray.pax_identifier_information.special_groups.this_woman_is,
                    MUAC_value: memberArray.pax_identifier_information.special_groups.muac_value || 0,
                    source_of_livelihood: memberArray.pax_identifier_information.special_groups.livelihood,
                    mom_child_booklet: memberArray.pax_identifier_information.has_motherchildbooklet,
                    community_unit: memberArray.pax_identifier_information.the_cu_name,
                    comm_frp_mobile: dataValue('form.case.update.chs_contact'),
                    CHS_hh_number: dataValue('form.Household_information.is_this_new_village.CHS_Household_Number'),
                    facility_comm_unit: memberArray.pax_identifier_information.linked_facility_in_cu,

                    // health_insurance: memberArray.pax_identifier_information.chs_hh.do_you_have_health_insurance_cover,
                    // health_insurance_details: memberArray.pax_identifier_information.chs_hh.you_have_selected_do_you_have_health_insurance_cover_kindly_specifiy_which_,
                    // health_insurance_details: memberArray.pax_identifier_information.chs_hh.health_insurance_cover_details||'',

                    // birth_cert: memberArray.pax_identifier_information.chs_hh.birth_certificate_no||'',
                    //birth_cert_no: memberArray.pax_identifier_information.chs_hh.birth_certificate_details||'',

                    // orphan: memberArray.chs_hh.question_list_chusla.orphan,

                    // other_health_insurance: memberArray.PAX_info.middle_name,

                    // schooling: memberArray.chs_hh.question_list_chusla.in_school,

                    // vitamin_given: memberArray.chs_hh.question_list_chusla.was_vitamin_a_given || '',
                    // penta_3_given: memberArray.chs_hh.question_list_chusla.was_penta_3_given || '',
                    // immunized: memberArray.chs_hh.question_list_chusla.is_a_child_fully_immunized_under_1_yr_old || '',
                    // measles_rubella_immunized: memberArray.chs_hh.question_list_chusla.measles_rubella_at_2_years || '',
                    // delivery_place: memberArray.chs_hh.question_list_chusla.state_the_place_of_delivery || '',

                    full_name: memberArray.pax_identifier_information.PAX_info.pax_full_name,
                    age_months: memberArray.pax_identifier_information.PAX_info.hhm_age_months,
                    hhm_age_years: memberArray.pax_identifier_information.PAX_info.hhm_age_years,
                    under_5: memberArray.pax_identifier_information.PAX_info.under_5,
                    MUAC_status_calc: memberArray.pax_identifier_information.special_groups.MUAC_status_calc || '',
                    family_setup: memberArray.pax_identifier_information.family_setup,
                    orphan_second: memberArray.case.update.orphan,
                    fully_immunized_under_one: memberArray.pax_identifier_information.fully_immunized_under_one,

                    functional_latrine: memberArray.pax_identifier_information.functional_latrine,
                    mother_child_booklet: memberArray.pax_identifier_information.special_groups.is_this_house_hold_given_mother_and_child_health_booklet,

                    The_county: dataValue('form.Household_information.The_CountyLabel.the_county'),
                    subcounty: dataValue('form.Household_information.thesubcounty_label.the_subcounty'),
                    the_ward: memberArray.pax_identifier_information.the_ward,
                    The_location: memberArray.pax_identifier_information.the_location,
                    the_village: memberArray.pax_identifier_information.the_village,
                    srtt_village: 'SRTT_VILLAGE_ ' + memberArray.pax_identifier_information.the_village,

                    collected_by: memberArray.pax_identifier_information.user_collected_is,
                    date_of_collection: memberArray.pax_identifier_information.date_of_collection,
                    hhid_output: memberArray.case.update.HHID_output,

                    vitamin_a_under1: memberArray.pax_identifier_information['vitamin_a_under1'],
                    GPS: memberArray.pax_identifier_information.GPS,
                    date_posted: new Date().toISOString(),

                    srtt_village: 'NO SRTT',
                    originator: 'v2',
                  };
                } else {
                  return null;
                }
              },
              {
                setNull: "'undefined'",
                logValues: true,
              }
            );
          }
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Fetch-Patients-Records:
        source_trigger: webhook
        target_job: Fetch-Patients-Records
        condition_type: always
        enabled: true
      Fetch-Patients-Records->Add-Member-To-A-HH:
        source_job: Fetch-Patients-Records
        target_job: Add-Member-To-A-HH
        condition_type: js_expression
        condition_label: null
        condition_expression: |
          state.fullHousehold != true;
        enabled: true
      Fetch-Patients-Records->Create-HH-and-Members:
        source_job: Fetch-Patients-Records
        target_job: Create-HH-and-Members
        condition_type: js_expression
        condition_label: null
        condition_expression: |
          state.fullHousehold == true
        enabled: true
